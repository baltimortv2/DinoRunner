/**
 * Connection Monitor Service
 * –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å backend —Å–µ—Ä–≤–µ—Ä–æ–º
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –º–µ–∂–¥—É –æ–Ω–ª–∞–π–Ω –∏ –æ—Ñ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–∞–º–∏
 */

export class ConnectionMonitor {
  constructor(apiService) {
    this.apiService = apiService; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å
    this.healthCheckUrl = '/api/health';
    this.isOnline = true;
    this.lastCheck = Date.now();
    this.checkInterval = 5000; // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
    this.offlineThreshold = 10000; // –°—á–∏—Ç–∞–µ–º –æ—Ñ—Ñ–ª–∞–π–Ω –ø–æ—Å–ª–µ 10 —Å–µ–∫—É–Ω–¥ –±–µ–∑ –æ—Ç–≤–µ—Ç–∞
    this.retryInterval = null;
    this.offlineBanner = null;
    this.connectionBanner = null;
    this.gamePaused = false;
    this.lastScore = 0;
    
    this.startMonitoring();
  }

  startMonitoring() {
    this.retryInterval = setInterval(() => {
      this.checkConnection();
    }, this.checkInterval);
  }

  stopMonitoring() {
    if (this.retryInterval) {
      clearInterval(this.retryInterval);
      this.retryInterval = null;
    }
  }

  async checkConnection() {
    try {
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 5000);
      
      const isOk = await this.apiService.healthCheck(controller.signal);
      clearTimeout(timeoutId);
      
      if (isOk) {
        this.handleConnectionRestored();
      } else {
        this.handleConnectionLost();
      }
    } catch (error) {
      this.handleConnectionLost();
    }
  }

  handleConnectionLost() {
    if (this.isOnline) {
      console.log('üî¥ Connection lost');
      this.isOnline = false;
      this.lastCheck = Date.now();
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ñ—Ñ–ª–∞–π–Ω –±–∞–Ω–Ω–µ—Ä
      this.showOfflineBanner();
      
      // –ï—Å–ª–∏ –∏–≥—Ä–∞ –∏–¥–µ—Ç, —Å—Ç–∞–≤–∏–º –Ω–∞ –ø–∞—É–∑—É
      this.pauseGameIfRunning();
      
      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
      this.syncDataOnOffline();
    }
  }

  handleConnectionRestored() {
    if (!this.isOnline) {
      console.log('üü¢ Connection restored');
      this.isOnline = true;
      
      // –°–∫—Ä—ã–≤–∞–µ–º –æ—Ñ—Ñ–ª–∞–π–Ω –±–∞–Ω–Ω–µ—Ä
      this.hideOfflineBanner();
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–Ω–Ω–µ—Ä –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
      this.showConnectionRestoredBanner();
      
      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º
      this.syncDataOnRestore();
    }
  }

  showOfflineBanner() {
    if (this.offlineBanner) return;
    
    this.offlineBanner = document.createElement('div');
    this.offlineBanner.className = 'offline-banner';
    this.offlineBanner.innerHTML = `
      <div class="offline-content">
        <span class="offline-icon">üì°</span>
        <span class="offline-text">OFFLINE</span>
      </div>
    `;
    
    document.body.appendChild(this.offlineBanner);
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
    setTimeout(() => {
      this.offlineBanner.classList.add('show');
    }, 100);
  }

  hideOfflineBanner() {
    if (this.offlineBanner) {
      this.offlineBanner.classList.remove('show');
      setTimeout(() => {
        if (this.offlineBanner && this.offlineBanner.parentNode) {
          this.offlineBanner.parentNode.removeChild(this.offlineBanner);
        }
        this.offlineBanner = null;
      }, 300);
    }
  }

  showConnectionRestoredBanner() {
    if (this.connectionBanner) return;
    
    this.connectionBanner = document.createElement('div');
    this.connectionBanner.className = 'connection-restored-banner';
    this.connectionBanner.innerHTML = `
      <div class="connection-content">
        <span class="connection-icon">‚úÖ</span>
        <span class="connection-text">–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ</span>
      </div>
    `;
    
    document.body.appendChild(this.connectionBanner);
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
    setTimeout(() => {
      this.connectionBanner.classList.add('show');
    }, 100);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
      this.hideConnectionRestoredBanner();
    }, 3000);
  }

  hideConnectionRestoredBanner() {
    if (this.connectionBanner) {
      this.connectionBanner.classList.remove('show');
      setTimeout(() => {
        if (this.connectionBanner && this.connectionBanner.parentNode) {
          this.connectionBanner.parentNode.removeChild(this.connectionBanner);
        }
        this.connectionBanner = null;
      }, 300);
    }
  }

  pauseGameIfRunning() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–¥–µ—Ç –ª–∏ –∏–≥—Ä–∞
    const gameCanvas = document.getElementById('game-canvas');
    if (gameCanvas && !gameCanvas.classList.contains('hidden')) {
      // –ï—Å–ª–∏ –∏–≥—Ä–∞ –∞–∫—Ç–∏–≤–Ω–∞, —Å—Ç–∞–≤–∏–º –Ω–∞ –ø–∞—É–∑—É
      if (window.gameInstance && window.gameInstance.isRunning()) {
        window.gameInstance.pause();
        this.gamePaused = true;
        console.log('üéÆ Game paused due to connection loss');
      }
    }
  }

  resumeGameIfPaused() {
    if (this.gamePaused && window.gameInstance) {
      window.gameInstance.resume();
      this.gamePaused = false;
      console.log('üéÆ Game resumed after connection restored');
    }
  }

  async syncDataOnOffline() {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—á–µ—Ç
    if (window.gameInstance && window.gameInstance.getScore) {
      this.lastScore = window.gameInstance.getScore();
    }
    
    // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ª–æ–∫–∞–ª—å–Ω–æ
    try {
      const gameData = {
        score: this.lastScore,
        timestamp: Date.now(),
        offline: true
      };
      localStorage.setItem('dinoRunner_offline_data', JSON.stringify(gameData));
    } catch (error) {
      console.warn('Failed to save offline data:', error);
    }
  }

  async syncDataOnRestore() {
    try {
      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º
      if (this.apiService) { 
        await this.apiService.getUserStats(); 
      }
      
      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–≥—Ä—É –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞ –Ω–∞ –ø–∞—É–∑–µ
      this.resumeGameIfPaused();
      
      // –û—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      localStorage.removeItem('dinoRunner_offline_data');
      
    } catch (error) {
      console.error('Failed to sync data on restore:', error);
    }
  }

  isBackendConnected() {
    return this.isOnline;
  }

  getConnectionStatus() {
    return {
      isOnline: this.isOnline,
      lastCheck: this.lastCheck,
      gamePaused: this.gamePaused
    };
  }
}
