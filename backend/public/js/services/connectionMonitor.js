/**
 * Connection Monitor Service
 * –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å backend —Å–µ—Ä–≤–µ—Ä–æ–º
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –º–µ–∂–¥—É –æ–Ω–ª–∞–π–Ω –∏ –æ—Ñ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–∞–º–∏
 */

class ConnectionMonitor {
  constructor() {
    this.isOnline = false; // –ù–∞—á–∏–Ω–∞–µ–º —Å –æ—Ñ—Ñ–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å–∞
    this.wasOffline = false; // –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Ç–µ—Ä–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    this.lastCheck = Date.now();
    this.checkInterval = 30000; // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    this.retryAttempts = 0;
    this.maxRetries = 3;
    this.healthCheckUrl = '/api/health';
    this.listeners = new Set();

    console.log('üîå ConnectionMonitor: Constructor called');
    this.init();
  }

  init() {
    console.log('üîå ConnectionMonitor: Initializing...');
    
    // –ù–∞—á–∏–Ω–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    this.startMonitoring();
    
    // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è –±—Ä–∞—É–∑–µ—Ä–∞
    window.addEventListener('online', () => this.handleBrowserOnline());
    window.addEventListener('offline', () => this.handleBrowserOffline());
    
    // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    document.addEventListener('visibilitychange', () => {
      if (!document.hidden && Date.now() - this.lastCheck > 10000) {
        this.checkConnection();
      }
    });
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', () => {
        setTimeout(() => this.checkConnection(), 1000);
      });
    } else {
      // DOM —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω
      setTimeout(() => this.checkConnection(), 1000);
    }
  }

  startMonitoring() {
    console.log('üöÄ Starting connection monitoring...');
    
    // –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    this.checkConnection();
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏
    setInterval(() => {
      this.checkConnection();
    }, this.checkInterval);
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏ —Ñ–æ–∫—É—Å–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    window.addEventListener('focus', () => {
      if (Date.now() - this.lastCheck > 15000) {
        this.checkConnection();
      }
    });
  }

  async checkConnection() {
    try {
      
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 3000);
      
      const response = await fetch(this.healthCheckUrl, {
        method: 'GET',
        cache: 'no-cache',
        signal: controller.signal
      });
      
      clearTimeout(timeoutId);
      
      if (response.ok) {
        console.log('‚úÖ Backend health check successful');
        this.setOnlineStatus(true);
      } else {
        console.warn('‚ö†Ô∏è Backend health check failed with status:', response.status);
        this.setOnlineStatus(false);
      }
    } catch (error) {
      if (error.name === 'AbortError') {
        console.warn('‚è∞ Connection check timeout');
      } else {
        console.warn('üî¥ Connection check failed:', error.message);
      }
      this.setOnlineStatus(false);
    }
  }

  setOnlineStatus(online) {
    const wasOnline = this.isOnline;
    this.isOnline = online;

    if (online) {
      this.retryAttempts = 0;
      this.lastCheck = Date.now();

      if (!wasOnline) {
        console.log('üü¢ Backend connection restored!');
        this.wasOffline = true; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–ª—è –ø–æ–∫–∞–∑–∞ –±–∞–Ω–Ω–µ—Ä–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        this.notifyListeners('online');
        this.syncData();
      }
    } else {
      if (wasOnline) {
        console.log('üî¥ Backend connection lost!');
        this.wasOffline = true; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–æ—Ç–µ—Ä–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        this.notifyListeners('offline');
      }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º UI
    this.updateUI();
  }

  async syncData() {
    if (!this.isOnline) return;
    
    try {
      console.log('üîÑ Syncing data with backend...');
      
      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (window.apiService) {
        await window.apiService.getUserStats();
      }
      
      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–∫–∏–Ω—ã
      if (window.shopManager) {
        await window.shopManager.loadSkinData();
      }
      
      console.log('‚úÖ Data sync completed');
    } catch (error) {
      console.error('‚ùå Data sync failed:', error);
    }
  }

  handleBrowserOnline() {
    console.log('üåê Browser connection restored');
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º backend —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    setTimeout(() => this.checkConnection(), 1000);
  }

  handleBrowserOffline() {
    console.log('üåê Browser connection lost');
    this.setOnlineStatus(false);
  }

  updateUI() {
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ç—É—Å–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –æ—Ñ—Ñ–ª–∞–π–Ω
    const statusIndicator = document.getElementById('connection-status');
    if (statusIndicator) {
      if (this.isOnline) {
        // –û–Ω–ª–∞–π–Ω - —Å–∫—Ä—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
        statusIndicator.style.display = 'none';
      } else {
        // –û—Ñ—Ñ–ª–∞–π–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
        statusIndicator.style.display = 'block';
        statusIndicator.className = 'connection-status offline';
        statusIndicator.textContent = 'üî¥ –û—Ñ—Ñ–ª–∞–π–Ω';
        statusIndicator.title = '–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º';
      }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    const mainContainer = document.querySelector('.game-container');
    if (mainContainer) {
      mainContainer.classList.toggle('offline-mode', !this.isOnline);
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º –±–∞–Ω–Ω–µ—Ä—ã
    this.toggleOfflineBanner();
    this.toggleOnlineBanner();
  }

  toggleOfflineBanner() {
    let banner = document.getElementById('offline-banner');
    
    if (!this.isOnline && !banner) {
      // –°–æ–∑–¥–∞–µ–º –±–∞–Ω–Ω–µ—Ä
      console.log('üî¥ Creating offline banner');
      banner = document.createElement('div');
      banner.id = 'offline-banner';
      banner.className = 'offline-banner';
      banner.innerHTML = `
        <div class="offline-content">
          <div class="offline-icon">üî¥</div>
          <div class="offline-text">
            <h3>–û—Ñ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º</h3>
            <p>–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.</p>
            <small>–ò–≥—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç —Ä–∞–±–æ—Ç–∞—Ç—å, –Ω–æ –ø—Ä–æ–≥—Ä–µ—Å—Å –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è</small>
          </div>
        </div>
      `;
      
      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è
      banner.addEventListener('click', () => {
        console.log('üëÜ Offline banner clicked, removing...');
        banner.remove();
      });
      
      document.body.appendChild(banner);
      
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–±–∏—Ä–∞–µ–º –±–∞–Ω–Ω–µ—Ä —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
      setTimeout(() => {
        if (banner && banner.parentNode) {
          console.log('‚è∞ Auto-removing offline banner after 3 seconds');
          banner.remove();
        }
      }, 3000);
      
    } else if (this.isOnline && banner) {
      // –£–¥–∞–ª—è–µ–º –±–∞–Ω–Ω–µ—Ä –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
      console.log('üü¢ Removing offline banner - connection restored');
      banner.remove();
    }
  }

  toggleOnlineBanner() {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–Ω–Ω–µ—Ä –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    if (this.isOnline && this.wasOffline) {
      let banner = document.getElementById('online-banner');

      if (!banner) {
        console.log('üü¢ Creating online restoration banner');
        banner = document.createElement('div');
        banner.id = 'online-banner';
        banner.className = 'online-banner';
        banner.innerHTML = `
          <div class="online-content">
            <div class="online-icon">üü¢</div>
            <div class="online-text">
              <h3>–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ</h3>
              <p>–°–≤—è–∑—å —Å —Å–µ—Ä–≤–µ—Ä–æ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã.</p>
            </div>
          </div>
        `;

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è
        banner.addEventListener('click', () => {
          console.log('üëÜ Online banner clicked, removing...');
          banner.remove();
        });

        document.body.appendChild(banner);

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–±–∏—Ä–∞–µ–º –±–∞–Ω–Ω–µ—Ä —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
          if (banner && banner.parentNode) {
            console.log('‚è∞ Auto-removing online banner after 3 seconds');
            banner.remove();
          }
        }, 3000);
      }
    }

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ wasOffline –ø–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞ –±–∞–Ω–Ω–µ—Ä–∞
    if (this.isOnline) {
      this.wasOffline = false;
    }
  }

  addListener(event, callback) {
    this.listeners.add({ event, callback });
  }

  removeListener(event, callback) {
    for (const listener of this.listeners) {
      if (listener.event === event && listener.callback === callback) {
        this.listeners.delete(listener);
        break;
      }
    }
  }

  notifyListeners(event) {
    for (const listener of this.listeners) {
      if (listener.event === event) {
        try {
          listener.callback();
        } catch (error) {
          console.error('Listener error:', error);
        }
      }
    }
  }

  // –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  getStatus() {
    return {
      isOnline: this.isOnline,
      lastCheck: this.lastCheck,
      retryAttempts: this.retryAttempts
    };
  }

  forceCheck() {
    this.checkConnection();
  }

  isBackendOnline() {
    return this.isOnline;
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
window.ConnectionMonitor = ConnectionMonitor;
