import { Game } from './game/engine.js';
import { initHUD } from './ui/hud.js';
import { initMenu } from './ui/menu.js';
import { SkinShop } from './ui/shop.js';
// –ø–æ–¥–∫–ª—é—á–∞–µ–º —á–µ—Ä–µ–∑ index.html –æ–±—ã—á–Ω—ã–º–∏ —Ç–µ–≥–∞–º–∏, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ MIME –æ—à–∏–±–æ–∫

function fitCanvasToContainer(canvas) {
  const container = canvas.parentElement;

  // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –±–µ–∑ —É—á–µ—Ç–∞ —Å–∫—Ä–æ–ª–ª–±–∞—Ä–æ–≤
  const containerWidth = container.clientWidth || window.innerWidth;
  const containerHeight = container.clientHeight || window.innerHeight;

  // –î–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–º–µ—Ä—ã viewport
  const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
  const isTablet = /iPad|Android(?=.*\bMobile\b)|Tablet|PlayBook|BB10|Silk/i.test(navigator.userAgent);

  let effectiveWidth = containerWidth;
  let effectiveHeight = containerHeight;

  if (isMobile && !isTablet) {
    // –î–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º 100% —à–∏—Ä–∏–Ω—ã –∏ –≤—ã—Å–æ—Ç—ã viewport
    effectiveWidth = window.innerWidth;
    effectiveHeight = window.innerHeight;

    // –£—á–∏—Ç—ã–≤–∞–µ–º safe areas –Ω–∞ iPhone X –∏ –Ω–æ–≤–µ–µ
    if (window.visualViewport) {
      effectiveWidth = window.visualViewport.width;
      effectiveHeight = window.visualViewport.height;
    }
  }

  // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–≥—Ä–æ–≤—É—é –∑–æ–Ω—É –Ω–∞ ~15% –∑–∞ —Å—á—ë—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–ª–µ–≤–æ–≥–æ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è
  const baseAspectRatio = 21 / 9;
  const aspectRatio = baseAspectRatio * (1 / 0.85);

  let targetWidth, targetHeight;

  // Letterbox-scaling —Å —É—á–µ—Ç–æ–º –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ —ç–∫—Ä–∞–Ω–∞
  const containerRatio = effectiveWidth / effectiveHeight;
  const orientation = containerRatio > 1 ? 'landscape' : 'portrait';

  if (orientation === 'landscape') {
    // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è
    if (containerRatio > aspectRatio) {
      // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —à–∏—Ä–µ, —á–µ–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∏–≥—Ä—ã
      targetHeight = effectiveHeight;
      targetWidth = targetHeight * aspectRatio;
    } else {
      // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —É–∂–µ, —á–µ–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∏–≥—Ä—ã
      targetWidth = effectiveWidth;
      targetHeight = targetWidth / aspectRatio;
    }
  } else {
    // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è
    if (containerRatio < 1/aspectRatio) {
      // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –≤—ã—à–µ, —á–µ–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∏–≥—Ä—ã
      targetWidth = effectiveWidth;
      targetHeight = targetWidth / aspectRatio;
    } else {
      // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–∏–∂–µ, —á–µ–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∏–≥—Ä—ã
      targetHeight = effectiveHeight;
      targetWidth = targetHeight * aspectRatio;
    }
  }

  // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ high-DPI (–º–æ–±–∏–ª—å–Ω—ã–µ —ç–∫—Ä–∞–Ω—ã)
  const dpr = Math.max(1, Math.min(3, window.devicePixelRatio || 1)); // –£–≤–µ–ª–∏—á–∏–ª–∏ –¥–æ 3 –¥–ª—è –ª—É—á—à–∏—Ö —ç–∫—Ä–∞–Ω–æ–≤

  // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  const maxWidth = 4096;
  const maxHeight = 2160;

  const width = Math.min(Math.floor(targetWidth * dpr), maxWidth);
  const height = Math.min(Math.floor(targetHeight * dpr), maxHeight);

  // –û–±–Ω–æ–≤–ª—è–µ–º canvas —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–∞–∑–º–µ—Ä—ã –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
  if (canvas.width !== width || canvas.height !== height) {
    canvas.width = width;
    canvas.height = height;

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∏–ª—å canvas –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    canvas.style.width = targetWidth + 'px';
    canvas.style.height = targetHeight + 'px';

    console.log(`üìê Canvas resized: ${width}x${height} (${Math.round(dpr*100)/100}x), Display: ${Math.round(targetWidth)}x${Math.round(targetHeight)}, Device: ${isMobile ? 'mobile' : 'desktop'}`);
  }

  // –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–ø–æ—Ä—Ü–∏–π
  const ctx = canvas.getContext('2d');
  ctx.imageSmoothingEnabled = false; // –û—Ç–∫–ª—é—á–∞–µ–º —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ –¥–ª—è –ø–∏–∫—Å–µ–ª—å–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫–∏

  // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∫–∞–Ω–≤–∞—Å –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
  canvas.style.width = targetWidth + 'px';
  canvas.style.height = targetHeight + 'px';
}

// Restore theme from localStorage before anything else
(function restoreTheme() {
  const saved = localStorage.getItem('theme') || 'dark';
  document.documentElement.setAttribute('data-theme', saved);
})();

window.addEventListener('load', async () => {
  const canvas = document.getElementById('game-canvas');

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API —Å–µ—Ä–≤–∏—Å–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (safe)
  console.log('üîå Initializing API service...');
  if (window.apiService) {
    console.log('‚úÖ API service available');
  } else {
    console.warn('‚ö†Ô∏è API service not available');
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  window.connectionMonitor = new ConnectionMonitor();
  console.log('üîå Connection Monitor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  
  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
  setTimeout(() => {
    if (window.connectionMonitor) {
      console.log('üîÑ Forcing initial connection check...');
      window.connectionMonitor.forceCheck();
    }
  }, 2000);
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
  setTimeout(() => {
    if (window.connectionMonitor) {
      console.log('üîÑ Second connection check...');
      window.connectionMonitor.forceCheck();
    }
  }, 5000);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  if (window.telegramAuthService && window.telegramAuthService.isUserAuthenticated()) {
    console.log('üîê Telegram –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–∞');
    const userData = window.telegramAuthService.getUserData();
    console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Telegram:', userData);
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å backend
    // (–±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω–æ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è game)
  } else {
    console.log('üåê Telegram –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞ - development mode');
    // –í development mode –∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    loadUserDataFromBackend();
  }

  // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  window.addEventListener('telegram-auth-success', (event) => {
    console.log('üéâ Telegram authentication success event received');
    const userData = event.detail?.userData;
    if (userData) {
      updateWelcomeMessage({
        firstName: userData.firstName,
        lastName: userData.lastName,
        username: userData.username
      });
    }
  });

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
  setTimeout(() => {
    if (window.telegramAuthService && window.telegramAuthService.isUserAuthenticated()) {
      const userData = window.telegramAuthService.getUserData();
      if (userData) {
        updateWelcomeMessage({
          firstName: userData.firstName,
          lastName: userData.lastName,
          username: userData.username
        });
      }
    }
  }, 1000);

  // –ø–µ—Ä–≤–∏—á–Ω—ã–π —Ä–µ—Å–∞–π–∑ –ø–æ–¥ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
  fitCanvasToContainer(canvas);
  
  const game = new Game(canvas, {
    packName: 'standart',
  });
  
  window.gameInstance = game;

  if (game && game.environment && typeof game.environment.updateCanvasSize === 'function') {
    game.environment.updateCanvasSize(canvas);
  }

  // –¢–µ–ø–µ—Ä—å –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  loadUserDataFromBackend(game);

  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º haptic feedback –µ—Å–ª–∏ –µ—Å—Ç—å game.player
  if (game && game.player) {
    setupHapticFeedback(game);
  }

  window.addEventListener('resize', () => {
    fitCanvasToContainer(canvas);
    if (game && game.obstacles) {
      game.obstacles.updateCanvasWidth(canvas.width);
    }
    if (game && game.environment && typeof game.environment.updateCanvasSize === 'function') {
      game.environment.updateCanvasSize(canvas);
    }
    if (game && game.player) {
      game.player.x = Math.max(0, Math.round((canvas.width - game.player.width) / 2));
      if (typeof game.player.reset === 'function') {
        const keepX = game.player.x;
        game.player.reset();
        game.player.x = keepX;
      }
    }
  });

  const skinShop = new SkinShop(game);

  const currentSkin = skinShop.getCurrentSkin();
  game.setSkin(currentSkin.packName).catch(console.error);

  initHUD();

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –±—É–¥–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å —á–µ—Ä–µ–∑ Telegram –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
  // –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è —Å backend —Å–µ—Ä–≤–µ—Ä–∞
  game.score = 0;
  game._scoreAccum = 0;
  game.coins = 0;
  game.era = 1;
  
  // –û–±–Ω–æ–≤–ª—è–µ–º UI —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
  const sEl = document.getElementById('score'); if (sEl) sEl.textContent = '0';
  const cEl = document.getElementById('coins'); if (cEl) cEl.textContent = '0';
  const sc = document.getElementById('shop-coins'); if (sc) sc.textContent = '0';
  const eEl = document.getElementById('era'); if (eEl) eEl.textContent = '1';

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å backend
  async function loadUserDataFromBackend(gameInstance) {
    try {
      if (window.telegramAuthService && window.telegramAuthService.isUserAuthenticated()) {
        console.log('üîÑ Loading user data from backend...');

        const userData = await window.telegramAuthService.fetchUserData();
        if (userData && userData.success) {
          const profile = userData.profile;

          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä—ã
          if (gameInstance) {
            gameInstance.coins = profile.stats.totalCoins || 0;
            gameInstance.era = profile.stats.currentEra || 1;
          }

          // –û–±–Ω–æ–≤–ª—è–µ–º UI
          const sEl = document.getElementById('score'); if (sEl) sEl.textContent = '0';
          const cEl = document.getElementById('coins'); if (cEl) cEl.textContent = String(gameInstance?.coins || 0);
          const sc = document.getElementById('shop-coins'); if (sc) sc.textContent = String(gameInstance?.coins || 0);
          const eEl = document.getElementById('era'); if (eEl) eEl.textContent = String(gameInstance?.era || 1);

          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é
          const mmsScore = document.getElementById('mms-score'); if (mmsScore) mmsScore.textContent = '0';
          const mmsCoins = document.getElementById('mms-coins'); if (mmsCoins) mmsCoins.textContent = String(gameInstance?.coins || 0);
          const mmsEra = document.getElementById('mms-era'); if (mmsEra) mmsEra.textContent = String(gameInstance?.era || 1);

          // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –∏–º–µ–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          updateWelcomeMessage(profile);

          console.log('‚úÖ User data loaded from backend');
        }
      } else {
        // –í –±—Ä–∞—É–∑–µ—Ä–µ (–≤–Ω–µ Telegram) –≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º "–ò–≥—Ä–æ–∫"
        const welcomeSubtitle = document.getElementById('welcome-subtitle');
        if (welcomeSubtitle) welcomeSubtitle.textContent = '–ü—Ä–∏–≤–µ—Ç, –∏–≥—Ä–æ–∫!';
      }

      // –í—Å–µ–≥–¥–∞ –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      updateWelcomeMessageOnLoad();
    } catch (error) {
      console.error('‚ùå Failed to load user data:', error);
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤—Å–µ —Ä–∞–≤–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      updateWelcomeMessageOnLoad();
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–º–µ–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  function updateWelcomeMessage(profile) {
    const welcomeSubtitle = document.getElementById('welcome-subtitle');
    if (welcomeSubtitle && profile) {
      let displayName = '';

      // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞–Ω–Ω—ã—Ö (snake_case –∏ camelCase)
      const firstName = profile.firstName || profile.first_name;
      const lastName = profile.lastName || profile.last_name;
      const username = profile.username;

      if (firstName && lastName) {
        displayName = `${firstName} ${lastName}`;
      } else if (firstName) {
        displayName = firstName;
      } else if (username) {
        displayName = `@${username}`;
      } else {
        displayName = '–ò–≥—Ä–æ–∫';
      }

      welcomeSubtitle.textContent = `–ü—Ä–∏–≤–µ—Ç, ${displayName}!`;
      console.log('üëã Welcome message updated for:', displayName);
    }
  }
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  function updateWelcomeMessageOnLoad() {
    console.log('üîÑ Updating welcome message on load...');

    // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞
    if (!window.Telegram || !window.Telegram.WebApp) {
      console.log('üåê Browser detected - showing "–ü—Ä–∏–≤–µ—Ç, –∏–≥—Ä–æ–∫!"');
      const welcomeSubtitle = document.getElementById('welcome-subtitle');
      if (welcomeSubtitle) {
        welcomeSubtitle.textContent = '–ü—Ä–∏–≤–µ—Ç, –∏–≥—Ä–æ–∫!';
      }
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º Telegram WebApp
    if (window.Telegram.WebApp.initDataUnsafe && window.Telegram.WebApp.initDataUnsafe.user) {
      const user = window.Telegram.WebApp.initDataUnsafe.user;
      console.log('üì± Telegram user data:', user);
      updateWelcomeMessage({
        firstName: user.first_name,
        lastName: user.last_name,
        username: user.username
      });
    } else {
      console.log('‚ö†Ô∏è Telegram WebApp available but no user data');
      const welcomeSubtitle = document.getElementById('welcome-subtitle');
      if (welcomeSubtitle) {
        welcomeSubtitle.textContent = '–ü—Ä–∏–≤–µ—Ç, –∏–≥—Ä–æ–∫!';
      }
    }
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è backend –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
  let backendIntegration = null;
  try {
    if (window.BackendIntegration) {
      backendIntegration = new BackendIntegration(game);
      window.backendIntegration = backendIntegration;
      console.log('üîó Backend integration initialized');
      if (game && typeof game.on === 'function') {
        game.on('gameStart', () => { backendIntegration && backendIntegration.startGameSession(); });
        game.on('gameOver', (score) => { backendIntegration && backendIntegration.endGameSession(score); });
        game.on('scoreUpdate', (score) => { backendIntegration && backendIntegration.updateScore(score); });
      }
    }
  } catch (error) {
    console.warn('Backend integration failed:', error);
  }

  initMenu(game, skinShop);
  
  // –°–∏—Å—Ç–µ–º–∞ —Å—Ü–µ–Ω
  const SCENES = {
    WELCOME: 'welcome',     // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ
    MAIN_MENU: 'main-menu', // –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    GAME: 'game',          // –ò–≥—Ä–∞
    MENU: 'menu',          // –ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
    GAME_OVER: 'game-over' // –≠–∫—Ä–∞–Ω –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã
  };

  let currentScene = SCENES.WELCOME;
  let sceneElements = {};

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ü–µ–Ω
  function initScenes() {
    sceneElements = {
      [SCENES.WELCOME]: document.getElementById('tap-to-start'),
      [SCENES.MAIN_MENU]: document.getElementById('main-menu'),
      [SCENES.GAME]: null, // –û—Å–Ω–æ–≤–Ω–æ–π canvas
      [SCENES.MENU]: document.getElementById('menu'),
      [SCENES.GAME_OVER]: document.getElementById('gameover')
    };
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ü–µ–Ω—ã (–ø–æ—Å–ª–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è SCENES)
  initScenes();

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ü–µ–Ω
  function switchScene(sceneName) {
    console.log(`Switching to scene: ${sceneName}`);

    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å—Ü–µ–Ω—ã
    Object.values(sceneElements).forEach(element => {
      if (element) element.classList.add('hidden');
    });

    // –£–±–∏—Ä–∞–µ–º –æ–≤–µ—Ä–ª–µ–π
    document.getElementById('app')?.classList.remove('overlay-open');

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—É—é —Å—Ü–µ–Ω—É
    if (sceneElements[sceneName]) {
      sceneElements[sceneName].classList.remove('hidden');
      if (sceneName !== SCENES.GAME) {
        document.getElementById('app')?.classList.add('overlay-open');
      }
    }



    currentScene = sceneName;

    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ü–µ–Ω—ã
    switch (sceneName) {
      case SCENES.WELCOME:
        // –ó–∞–ø—É—Å–∫–∞–µ–º idle –∞–Ω–∏–º–∞—Ü–∏—é
        break;
      case SCENES.MAIN_MENU:
        drawGamePreview();
        // –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –æ—Ç–∫—Ä—ã—Ç–æ
        break;
      case SCENES.GAME:
        // –ò–≥—Ä–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞
        break;
      case SCENES.MENU:
        // –ú–µ–Ω—é –æ—Ç–∫—Ä—ã—Ç–æ
        break;
      case SCENES.GAME_OVER:
        // –≠–∫—Ä–∞–Ω game over
        break;
    }
  }

  let previewAnimationId = null;
  let previewStars = [];
  let previewClouds = [];
  let previewGroundScroll = 0;
  let previewFrame = 0;
  let previewFrameTime = 0;
  let previewDinoFrame = 0;
  let previewDinoFrameTime = 0;

  function initPreviewElements() {
    // –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ canvas
    const canvas = document.getElementById('preview-canvas');
    if (!canvas) return;

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–≤–µ–∑–¥—ã –¥–ª—è preview
    previewStars = [];
    for (let i = 0; i < 15; i++) {
      previewStars.push({
        x: Math.random() * canvas.width,
        y: Math.random() * (canvas.height * 0.4) + 15,
        size: 0.8 + Math.random() * 1.2,
        opacity: 0.5 + Math.random() * 0.3,
        speed: 0.02 + Math.random() * 0.03
      });
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±–ª–∞–∫–∞ –¥–ª—è preview
    previewClouds = [];
    for (let i = 0; i < 3; i++) {
      previewClouds.push({
        x: Math.random() * canvas.width,
        y: 20 + Math.random() * (canvas.height * 0.2),
        size: 0.8 + Math.random() * 0.4,
        speed: 0.01 + Math.random() * 0.02
      });
    }
  }

  function drawGamePreview() {
    const canvas = document.getElementById('preview-canvas');
    if (!canvas) return;
    const ctx = canvas.getContext('2d');

    ctx.clearRect(0, 0, canvas.width, canvas.height);

    // –ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω
    const grad = ctx.createLinearGradient(0, 0, canvas.width, canvas.height);
    grad.addColorStop(0, '#0c141a');
    grad.addColorStop(1, '#1a2630');
    ctx.fillStyle = grad;
    ctx.fillRect(0, 0, canvas.width, canvas.height);

    const groundY = Math.floor(canvas.height * 0.6);

    // –†–∏—Å—É–µ–º –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–≤–µ–∑–¥—ã
    ctx.fillStyle = '#ffffff';
    previewStars.forEach(star => {
      ctx.globalAlpha = star.opacity;
      ctx.beginPath();
      ctx.arc(star.x, star.y, star.size, 0, Math.PI * 2);
      ctx.fill();
      // –ê–Ω–∏–º–∏—Ä—É–µ–º –∑–≤–µ–∑–¥—ã
      star.x -= star.speed;
      if (star.x < -5) star.x = canvas.width + 5;
    });
    ctx.globalAlpha = 1;

    // –†–∏—Å—É–µ–º –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±–ª–∞–∫–∞
    const cloud = game.assetPack?.getAsset('cloud');
    previewClouds.forEach(cloudObj => {
      if (cloud) {
        ctx.globalAlpha = 0.6;
        const cloudW = cloud.width * cloudObj.size;
        const cloudH = cloud.height * cloudObj.size;
        ctx.drawImage(cloud, cloudObj.x, cloudObj.y, cloudW, cloudH);
        ctx.globalAlpha = 1;
      }
      // –ê–Ω–∏–º–∏—Ä—É–µ–º –æ–±–ª–∞–∫–∞
      cloudObj.x -= cloudObj.speed;
      if (cloudObj.x < -100) cloudObj.x = canvas.width + 100;
    });

    // –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–µ–º–ª—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–∫–∏–Ω –∑–µ–º–ª–∏
    const dirt = game.assetPack?.getAsset('dirt');
    if (dirt) {
      const tileW = dirt.width;
      const tileH = Math.min(dirt.height, canvas.height - groundY);
      previewGroundScroll += 0.3;
      let x = -previewGroundScroll % tileW;
      while (x < canvas.width) {
        ctx.drawImage(dirt, x, groundY, tileW, tileH);
        x += tileW;
      }
    } else {
      ctx.strokeStyle = '#334155'; ctx.lineWidth = 2; ctx.beginPath(); ctx.moveTo(0, groundY); ctx.lineTo(canvas.width, groundY); ctx.stroke();
    }

    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (–±–µ–≥—É—â–∏–π –¥–∏–Ω–æ–∑–∞–≤—Ä) - –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–∫–∏–Ω
    previewDinoFrameTime += 16; // ~60fps
    if (previewDinoFrameTime > 150) {
      previewDinoFrame = (previewDinoFrame + 1) % 3; // 3 –∫–∞–¥—Ä–∞ –±–µ–≥–∞
      previewDinoFrameTime = 0;
    }

    let dinoAssetName = 'dinoIdle';
    if (previewDinoFrame === 0) dinoAssetName = 'dinoRun1';
    else if (previewDinoFrame === 1) dinoAssetName = 'dinoRun2';
    else dinoAssetName = 'dinoRun3';

    const dino = game.assetPack?.getAsset(dinoAssetName);
    if (dino) {
      const scale = 0.9; const width = game.player.width * scale; const height = game.player.height * scale;
      const x = canvas.width * 0.18; const y = groundY - height; ctx.drawImage(dino, x, y, width, height);
    }

    // –ê–Ω–∏–º–∞—Ü–∏—è –≤–æ–∑–¥—É—à–Ω–æ–≥–æ –≤—Ä–∞–≥–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–∫–∏–Ω
    previewFrameTime += 16;
    if (previewFrameTime > 300) {
      previewFrame = (previewFrame + 1) % 2; // 2 –∫–∞–¥—Ä–∞ –∞–Ω–∏–º–∞—Ü–∏–∏
      previewFrameTime = 0;
    }

    const airAssetName = previewFrame === 0 ? 'AirEnemy1' : 'AirEnemy2';
    const air1 = game.assetPack?.getAsset(airAssetName);
    if (air1) {
      const targetH = 27 * 1.4; const scale = targetH / (air1.height || targetH); const targetW = (air1.width || 46) * scale;
      const x = canvas.width * 0.55; const y = groundY - 110; ctx.drawImage(air1, x, y, targetW, targetH);
    }

    // –ù–∞–∑–µ–º–Ω—ã–π –≤—Ä–∞–≥ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–∫–∏–Ω
    const big = game.assetPack?.getAsset('bigEnemy');
    if (big) {
      const targetH = 85 * 0.7; const scale = targetH / (big.height || targetH); const targetW = (big.width || 42) * scale;
      const x = canvas.width * 0.74; const y = groundY - targetH; ctx.drawImage(big, x, y, targetW, targetH);
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const sEl = document.getElementById('mms-score'); if (sEl) sEl.textContent = String(game.score);
    const cEl = document.getElementById('mms-coins'); if (cEl) cEl.textContent = String(game.coins);
    const eEl = document.getElementById('mms-era'); if (eEl) eEl.textContent = String(game.era);

    // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –µ—Å–ª–∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –æ—Ç–∫—Ä—ã—Ç–æ
    if (!document.getElementById('main-menu')?.classList.contains('hidden')) {
      previewAnimationId = requestAnimationFrame(drawGamePreview);
    }
  }

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º previewCanvas –ø–µ—Ä–µ–¥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π
  const previewCanvas = document.getElementById('preview-canvas');

  if (previewCanvas) {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã preview —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ canvas –Ω–∞–π–¥–µ–Ω
    initPreviewElements();
  } else {
    console.warn('‚ö†Ô∏è Preview canvas not found');
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É —Å—Ü–µ–Ω (–ø–µ—Ä–µ–º–µ—â–µ–Ω–æ –Ω–∏–∂–µ SCENES)
  // initScenes();

  // –ö–Ω–æ–ø–∫–∞ "–Ω–∞—á–∞—Ç—å" —Ç–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞–µ—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –≤ showResumeOverlay()

  window.addEventListener('refresh-preview', () => {
    if (!mainMenu.classList.contains('hidden')) { drawGamePreview(); }
  });

    function showMainMenu() {
    console.log('üéÆ Starting game from welcome screen...');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ–º —Å—Ü–µ–Ω—ã
    if (window.telegramAuthService && window.telegramAuthService.isUserAuthenticated()) {
      const userData = window.telegramAuthService.getUserData();
      if (userData) {
        updateWelcomeMessage({
          firstName: userData.firstName,
          lastName: userData.lastName,
          username: userData.username
        });
      }
    }
    
    // –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ
    const welcomeScreen = document.getElementById('tap-to-start');
    if (welcomeScreen) {
      welcomeScreen.classList.add('hidden');
    }
    
    // –£–±–∏—Ä–∞–µ–º –æ–≤–µ—Ä–ª–µ–π
    document.getElementById('app')?.classList.remove('overlay-open');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–≥—Ä—É
    try {
      console.log('üéÆ Initializing game...');
      game.initAudio();
      game.initialize().then(() => {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º overlay —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞—á–∞—Ç—å"
        showResumeOverlay();
        window.dispatchEvent(new Event('open-leaderboard-panel'));
        console.log('‚úÖ Game initialized successfully');
      }).catch((error) => {
        console.error('‚ùå Error in game.initialize():', error);
        // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        showMainMenuOnly();
      });
    } catch (error) {
      console.error('‚ùå Error initializing game:', error);
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
      showMainMenuOnly();
    }
  }
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–æ–∫)
  function showMainMenuOnly() {
    console.log('üè† Showing main menu only...');
    
    // –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ
    const welcomeScreen = document.getElementById('tap-to-start');
    if (welcomeScreen) {
      welcomeScreen.classList.add('hidden');
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    switchScene(SCENES.MAIN_MENU);
  }
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã –∏–∑ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –æ–∫–Ω–∞
  function startGameFromWelcome() {
    console.log('üéÆ START GAME FUNCTION CALLED!');

    // –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ
    const welcomeScreen = document.getElementById('tap-to-start');
    if (welcomeScreen) {
      welcomeScreen.classList.add('hidden');
      console.log('‚úÖ Welcome screen hidden');
    }

    // –£–±–∏—Ä–∞–µ–º –æ–≤–µ—Ä–ª–µ–π
    const app = document.getElementById('app');
    if (app) {
      app.classList.remove('overlay-open');
    }

    // –ü–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è "–ù–∞—á–∞—Ç—å –∏–≥—Ä—É" –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    console.log('üè† Switching to main menu...');
    switchScene(SCENES.MAIN_MENU);
    window.dispatchEvent(new Event('open-leaderboard-panel'));

    console.log('‚úÖ Game start sequence completed - Main menu shown');
  }
  
  // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã (–µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–∞—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)
  function startGameAlternative() {
    console.log('üéÆ Alternative game start method called...');
    
    // –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ
    const welcomeScreen = document.getElementById('tap-to-start');
    if (welcomeScreen) {
      welcomeScreen.classList.add('hidden');
    }
    
    // –£–±–∏—Ä–∞–µ–º –æ–≤–µ—Ä–ª–µ–π
    const app = document.getElementById('app');
    if (app) {
      app.classList.remove('overlay-open');
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º overlay —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞—á–∞—Ç—å"
    showResumeOverlay();
    window.dispatchEvent(new Event('open-leaderboard-panel'));
    console.log('‚úÖ Alternative method: Game overlay shown directly');
  }
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–æ–∫)
  function showMainMenuOnly() {
    console.log('üè† Showing main menu only...');
    
    // –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ
    const welcomeScreen = document.getElementById('tap-to-start');
    if (welcomeScreen) {
      welcomeScreen.classList.add('hidden');
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    switchScene(SCENES.MAIN_MENU);
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏ "–ù–∞—á–∞—Ç—å –∏–≥—Ä—É" —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ DOM
  function initStartButton() {
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫—É –≤ welcome overlay
    let btnStart = document.getElementById('btn-start');
    if (!btnStart) {
      // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—â–µ–º –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é
      btnStart = document.getElementById('btn-main-start');
    }

    if (btnStart) {
      console.log('üéÆ Setting up start button event listeners');
      console.log('üîç Button element:', btnStart);

      // –ü—Ä–æ—Å—Ç–æ–π –ø—Ä—è–º–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –±–µ–∑ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
      btnStart.onclick = function(e) {
        console.log('üéÆ START BUTTON CLICKED - SIMPLE HANDLER!');
        e.preventDefault();
        e.stopPropagation();
        startGameFromWelcome();
        return false;
      };

      // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—É—é –∏–Ω–¥–∏–∫–∞—Ü–∏—é
      btnStart.style.cursor = 'pointer';
      btnStart.style.backgroundColor = '#10b981';
      btnStart.style.color = 'white';
      btnStart.style.border = 'none';
      btnStart.style.padding = '15px 30px';
      btnStart.style.borderRadius = '10px';
      btnStart.style.fontSize = '16px';
      btnStart.style.fontWeight = 'bold';

      // –î–æ–±–∞–≤–ª—è–µ–º hover —ç—Ñ—Ñ–µ–∫—Ç
      btnStart.onmouseover = function() {
        this.style.backgroundColor = '#059669';
      };
      btnStart.onmouseout = function() {
        this.style.backgroundColor = '#10b981';
      };

      console.log('‚úÖ Start button handler configured with simple onclick');
    } else {
      console.warn('‚ö†Ô∏è Start button not found, retrying...');
      setTimeout(initStartButton, 200);
    }
  }
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
  setTimeout(initStartButton, 500);

  // –¢–∞–∫–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º resume –∫–Ω–æ–ø–∫—É –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
  function initResumeButton() {
    const resumeBtn = document.getElementById('resume-btn');
    if (resumeBtn) {
      console.log('üéÆ Setting up resume button event listeners');
      resumeBtn.onclick = function(e) {
        console.log('üéÆ RESUME BUTTON CLICKED!');
        e.preventDefault();
        e.stopPropagation();
        // –õ–æ–≥–∏–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã –∏–∑ resume overlay
        const gameInstance = window.gameInstance;
        if (gameInstance && typeof gameInstance.start === 'function') {
          gameInstance.start();
          console.log('‚úÖ Game started from resume button');
        }
        return false;
      };
      resumeBtn.style.cursor = 'pointer';
    }
  }

  // –¢–µ—Å—Ç–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
  setTimeout(() => {
    const btnStart = document.getElementById('btn-start');
    console.log('üß™ Testing start button after 2 seconds:', btnStart);
    if (btnStart) {
      console.log('üîç Button text:', btnStart.textContent);
      console.log('üîç Button onclick:', btnStart.onclick);
      console.log('üîç Button disabled:', btnStart.disabled);
    } else {
      console.error('‚ùå Start button not found after 2 seconds');
    }
  }, 2000);

  // –û–±—ä—è–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
  const mainMenu = document.getElementById('main-menu');
  const btnMainStart = document.getElementById('btn-main-start');
  const btnMainShop = document.getElementById('btn-main-shop');
  const btnMainMenu = document.getElementById('btn-main-menu');

  if (btnMainStart) {
    const startGameFromMain = async () => {
      try {
        console.log('[main-start] clicked');
        game.initAudio();
        if (mainMenu) mainMenu.classList.add('hidden');
        document.getElementById('app')?.classList.remove('overlay-open');
        await game.initialize();
        // –ù–ï –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–∞—É–∑—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ - –æ–Ω–∞ –ø–æ—è–≤–∏—Ç—Å—è –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è "–ù–∞—á–∞—Ç—å"
        showResumeOverlay();
        window.dispatchEvent(new Event('open-leaderboard-panel'));
        console.log('[main-start] game started in pause');
      } catch (error) {
        console.error('Error starting game:', error);
      }
    };
    btnMainStart.addEventListener('click', startGameFromMain);
    btnMainStart.addEventListener('touchend', (e) => { e.preventDefault(); startGameFromMain(); }, { passive: false });
  }

  if (btnMainShop) {
    const openShopFromMain = () => {
      mainMenu.classList.add('hidden');
      const coinsEl = document.getElementById('shop-coins'); if (coinsEl) coinsEl.textContent = String(game.coins);
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ —á—Ç–æ –º–∞–≥–∞–∑–∏–Ω –æ—Ç–∫—Ä—ã—Ç –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
      skinShop._openedFromMainMenu = true;
      skinShop.openShop();
    };
    btnMainShop.addEventListener('click', openShopFromMain);
    btnMainShop.addEventListener('touchend', (e) => { e.preventDefault(); openShopFromMain(); }, { passive: false });
  }

  if (btnMainMenu) {
    const openMenuFromMain = () => { 
      mainMenu.classList.add('hidden'); 
      const menu = document.getElementById('menu'); 
      if (menu) menu.classList.remove('hidden'); 
    };
    btnMainMenu.addEventListener('click', openMenuFromMain);
    btnMainMenu.addEventListener('touchend', (e) => { e.preventDefault(); openMenuFromMain(); }, { passive: false });
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
  const btnSound = document.getElementById('btn-sound');
  const btnReferrals = document.getElementById('btn-referrals');
  const btnExchange = document.getElementById('btn-exchange');
  const btnWithdraw = document.getElementById('btn-withdraw');
  const btnNickname = document.getElementById('btn-nickname');
  const btnTheme = document.getElementById('btn-theme');

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∑–≤—É–∫–∞
  if (btnSound) {
    btnSound.addEventListener('click', () => {
      console.log('üîä Sound button clicked');
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∑–≤—É–∫–∞
      window.telegramApp?.showAlert('–§—É–Ω–∫—Ü–∏—è –∑–≤—É–∫–∞ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞!');
    });
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
  if (btnReferrals) {
    btnReferrals.addEventListener('click', () => {
      console.log('üë• Referrals button clicked');
      window.telegramApp?.showAlert('–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞!');
    });
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ–±–º–µ–Ω–∞
  if (btnExchange) {
    btnExchange.addEventListener('click', () => {
      console.log('üí± Exchange button clicked');
      window.telegramApp?.showAlert('–û–±–º–µ–Ω –æ—á–∫–æ–≤ –Ω–∞ –º–æ–Ω–µ—Ç—ã —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω!');
    });
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤—ã–≤–æ–¥–∞
  if (btnWithdraw) {
    btnWithdraw.addEventListener('click', () => {
      console.log('üí∞ Withdraw button clicked');
      window.telegramApp?.showAlert('–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω!');
    });
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∫–Ω–µ–π–º–∞
  if (btnNickname) {
    btnNickname.addEventListener('click', () => {
      console.log('üë§ Nickname button clicked');
      showNicknameDialog();
    });
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Ç–µ–º—ã
  if (btnTheme) {
    btnTheme.addEventListener('click', () => {
      console.log('üåô Theme button clicked');
      toggleTheme();
    });
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –¥–∏–∞–ª–æ–≥–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∏–∫–Ω–µ–π–º–∞
  function showNicknameDialog() {
    const currentNickname = window.telegramAuthService?.getUserData()?.nickname ||
                           window.telegramApp?.getUserData()?.username ||
                           '–ò–≥—Ä–æ–∫';

    const newNickname = window.telegramApp ?
      window.telegramApp.showInput('–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∏–∫–Ω–µ–π–º', '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–∏–∫–Ω–µ–π–º:', currentNickname) :
      prompt('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–∏–∫–Ω–µ–π–º:', currentNickname);

    if (newNickname && newNickname !== currentNickname && newNickname.trim()) {
      updateNickname(newNickname.trim());
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∏–∫–Ω–µ–π–º–∞
  async function updateNickname(nickname) {
    try {
      console.log('üìù Updating nickname to:', nickname);

      const response = await fetch('/api/game/update-nickname', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'x-telegram-id': window.telegramAuthService?.getUserData()?.id || '12345'
        },
        body: JSON.stringify({ nickname })
      });

      const result = await response.json();

      if (result.success) {
        console.log('‚úÖ Nickname updated successfully');
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
        updateWelcomeMessage({
          firstName: nickname,
          lastName: '',
          username: nickname
        });

        if (window.telegramApp) {
          window.telegramApp.showAlert('–ù–∏–∫–Ω–µ–π–º —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!');
        } else {
          alert('–ù–∏–∫–Ω–µ–π–º —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!');
        }
      } else {
        throw new Error(result.error || 'Failed to update nickname');
      }
    } catch (error) {
      console.error('‚ùå Error updating nickname:', error);
      const message = error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∏–∫–Ω–µ–π–º–∞';
      if (window.telegramApp) {
        window.telegramApp.showAlert(message);
      } else {
        alert(message);
      }
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–µ–º—ã
  function toggleTheme() {
    const currentTheme = document.documentElement.getAttribute('data-theme') || 'dark';
    const newTheme = currentTheme === 'dark' ? 'light' : 'dark';

    document.documentElement.setAttribute('data-theme', newTheme);
    localStorage.setItem('theme', newTheme);

    console.log(`üé® Theme switched to: ${newTheme}`);

    if (window.telegramApp) {
      window.telegramApp.showAlert(`–¢–µ–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ ${newTheme === 'dark' ? '—Ç–µ–º–Ω—É—é' : '—Å–≤–µ—Ç–ª—É—é'}`);
    } else {
      alert(`–¢–µ–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ ${newTheme === 'dark' ? '—Ç–µ–º–Ω—É—é' : '—Å–≤–µ—Ç–ª—É—é'}`);
    }
  }

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Ç–µ–º—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
  const savedTheme = localStorage.getItem('theme') || 'dark';
  document.documentElement.setAttribute('data-theme', savedTheme);

  const resumeOverlayId = 'resume-overlay';
  function showResumeOverlay() {
    // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π overlay –µ—Å–ª–∏ –µ—Å—Ç—å
    let existingOverlay = document.getElementById(resumeOverlayId);
    if (existingOverlay) {
      existingOverlay.remove();
    }
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π overlay
    const overlay = document.createElement('div');
    overlay.id = resumeOverlayId;
    overlay.style.position = 'absolute'; 
    overlay.style.left = '0'; 
    overlay.style.right = '0'; 
    overlay.style.top = '0'; 
    overlay.style.bottom = '0';
    overlay.style.display = 'flex'; 
    overlay.style.alignItems = 'center'; 
    overlay.style.justifyContent = 'center';
    overlay.style.pointerEvents = 'auto'; 
    overlay.style.zIndex = '250';
    overlay.style.backgroundColor = 'transparent'; // –ü—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ñ–æ–Ω
    
    const button = document.createElement('button');
    button.id = 'resume-btn';
    button.className = 'btn btn-success btn-start';
    button.style.fontSize = '24px';
    button.style.padding = '20px 40px';
    button.style.minHeight = '72px';
    button.style.borderRadius = '20px';
    button.style.fontWeight = '600';
    button.style.position = 'absolute';
    button.style.top = '30%'; // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –≤ –Ω–µ–±–µ –Ω–∞–¥ HUD
    button.style.left = '50%';
    button.style.transform = 'translateX(-50%)';
    button.textContent = '–ù–∞—á–∞—Ç—å';
    
    overlay.appendChild(button);
    document.querySelector('.game-container').appendChild(overlay);

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è resume –∫–Ω–æ–ø–∫–∏
    setTimeout(() => initResumeButton(), 100);
    
    button.onclick = async function(e) {
      console.log('üéÆ RESUME BUTTON CLICKED - STARTING GAME!');
      e.preventDefault();
      overlay.remove();

      try {
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∏–≥—Ä—ã
        const gameInstance = window.gameInstance;

        if (gameInstance && typeof gameInstance.start === 'function') {
          console.log('üöÄ Starting game...');
          await gameInstance.start();
          console.log('‚úÖ Game started successfully');

          // –ó–∞–ø—É—Å–∫–∞–µ–º countdown –µ—Å–ª–∏ –µ—Å—Ç—å –º–µ—Ç–æ–¥
          if (gameInstance.resumeWithCountdown) {
            gameInstance.resumeWithCountdown();
          }
        } else {
          console.warn('‚ö†Ô∏è Game instance not available');
          showMainMenuOnly();
        }

        console.log('‚úÖ Game start sequence completed');
      } catch (error) {
        console.error('‚ùå Error starting game:', error);
        showMainMenuOnly();
      }
    };
  }

  const go = document.getElementById('gameover');
  const btnRestart = document.getElementById('btn-restart');
  const btnMainMenuGo = document.getElementById('btn-mainmenu-go');
  btnRestart.addEventListener('click', async () => {
    go.classList.add('hidden');
    document.getElementById('app')?.classList.remove('overlay-open');
    await game.initialize();
    // –ù–ï –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–∞—É–∑—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ - –æ–Ω–∞ –ø–æ—è–≤–∏—Ç—Å—è –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è "–ù–∞—á–∞—Ç—å"
    showResumeOverlay();
  });
  btnRestart.addEventListener('touchend', async (e) => {
    e.preventDefault();
    go.classList.add('hidden');
    document.getElementById('app')?.classList.remove('overlay-open');
    await game.initialize();
    // –ù–ï –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–∞—É–∑—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ - –æ–Ω–∞ –ø–æ—è–≤–∏—Ç—Å—è –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è "–ù–∞—á–∞—Ç—å"
    showResumeOverlay();
  }, { passive: false });
  if (btnMainMenuGo) {
    const backMain = () => { go.classList.add('hidden'); document.getElementById('app')?.classList.add('overlay-open'); showMainMenu(); };
    btnMainMenuGo.addEventListener('click', backMain);
    btnMainMenuGo.addEventListener('touchend', (e) => { e.preventDefault(); backMain(); }, { passive: false });
  }
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤—ã—Ö–æ–¥–∞ –∏–∑ –º–µ–Ω—é
  const btnMenuClose = document.getElementById('btn-menu-close');
  if (btnMenuClose) {
    const closeMenu = () => {
      console.log('üö™ Closing menu...');
      switchScene(SCENES.MAIN_MENU);
    };
    btnMenuClose.addEventListener('click', closeMenu);
    btnMenuClose.addEventListener('touchend', (e) => { e.preventDefault(); closeMenu(); }, { passive: false });
  }

  // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  updateWelcomeMessageOnLoad();
  
  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è —É—Å–ø–µ—à–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ Telegram
  window.addEventListener('telegram-auth-success', (event) => {
    console.log('üéâ Telegram auth success event received');
    if (event.detail && event.detail.userData) {
      const user = event.detail.userData;
      console.log('üì± Telegram user authenticated:', user);
      updateWelcomeMessage({
        firstName: user.firstName || user.first_name,
        lastName: user.lastName || user.last_name,
        username: user.username
      });
    }
  });

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º Telegram —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
  setTimeout(() => {
    if (window.Telegram && window.Telegram.WebApp) {
      console.log('üì± Telegram WebApp ready');
      if (window.Telegram.WebApp.initDataUnsafe && window.Telegram.WebApp.initDataUnsafe.user) {
        const user = window.Telegram.WebApp.initDataUnsafe.user;
        console.log('üë§ Telegram user found:', user);
        updateWelcomeMessage({
          firstName: user.first_name,
          lastName: user.last_name,
          username: user.username
        });
      }
    } else {
      console.log('üåê Not in Telegram WebApp');
    }
  }, 1000);
});

function setupHapticFeedback(gameInstance) {
  if (!window.telegramApp || !window.telegramApp.isTelegram || !gameInstance || !gameInstance.player) return;

  const originalJump = gameInstance.player.jump;
  gameInstance.player.jump = function() {
    originalJump.call(this);
    if (window.telegramApp && window.telegramApp.hapticImpact) {
      window.telegramApp.hapticImpact('light');
    }
  };

  const originalGameOver = gameInstance.gameOver;
  if (originalGameOver) {
    gameInstance.gameOver = function() {
      originalGameOver.call(this);
      if (window.telegramApp && window.telegramApp.hapticNotification) {
        window.telegramApp.hapticNotification('error');
      }
    };
  }

  const originalAddEra = gameInstance.addEra;
  if (originalAddEra) {
    gameInstance.addEra = function() {
      originalAddEra.call(this);
      if (window.telegramApp && window.telegramApp.hapticNotification) {
        window.telegramApp.hapticNotification('success');
      }
    };
  }
}

