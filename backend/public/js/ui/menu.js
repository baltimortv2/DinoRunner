// –í—Å–µ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ç–µ–ø–µ—Ä—å —á–µ—Ä–µ–∑ backend API
// import { getCurrentRate, getUser, exchangeCoins, setUserCoins } from '../utils/economy.js';

export function initMenu(game, skinShop) {
  const menu = document.getElementById('menu');
  const btnMenu = document.getElementById('btn-menu');
  const btnPause = document.getElementById('btn-pause');
  const btnClose = document.getElementById('btn-close-menu');
  const btnSound = document.getElementById('btn-sound');
  const btnExchange = document.getElementById('btn-exchange');
  const btnReferrals = document.getElementById('btn-referrals');
  const btnSkins = document.getElementById('btn-skins');
  const btnShopBottom = document.getElementById('btn-shop-bottom');
  const btnWithdraw = document.getElementById('btn-withdraw');
  const modalOverlay = document.getElementById('modal-overlay');
  const modal = document.getElementById('modal');
  const btnTheme = document.getElementById('btn-theme');
  const btnDevTools = document.getElementById('btn-dev-tools');
  const btnLeaderboard = document.getElementById('btn-leaderboard');
  const lbPanel = document.getElementById('leaderboard-panel');
  const lbBody = document.getElementById('leaderboard-body');
  const btnMenuBottom = document.getElementById('btn-menu-bottom');
  const btnMainMenuBottom = document.getElementById('btn-mainmenu-bottom');

  function openMenu() {
    if (!menu) return;
    if (game.running && !game.paused) {
      game.pause();
      game._wasPausedByMenu = true; // –§–ª–∞–≥ —á—Ç–æ –ø–∞—É–∑–∞ –±—ã–ª–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –º–µ–Ω—é
      updatePauseButton();
    }
    menu.classList.remove('hidden');
  }
  function closeMenu() {
    if (!menu) return;
    menu.classList.add('hidden');
    if (game._wasPausedByMenu && game.paused && game.running) {
      game._wasPausedByMenu = false;
      game.resumeWithCountdown();
      updatePauseButton();
    }
    if (!game.running) {
      const mainMenu = document.getElementById('main-menu');
      if (mainMenu) {
        mainMenu.classList.remove('hidden');
      }
    }
  }

  if (btnMenu) {
    btnMenu.addEventListener('click', openMenu);
    btnMenu.addEventListener('touchend', (e) => { e.preventDefault(); openMenu(); }, { passive: false });
  }
  if (btnClose) {
    btnClose.addEventListener('click', closeMenu);
    btnClose.addEventListener('touchend', (e) => { e.preventDefault(); closeMenu(); }, { passive: false });
  }

  function updatePauseButton() {
    if (!btnPause) return;
    const icon = btnPause.querySelector('.btn-icon');
    const text = btnPause.querySelector('span:last-child');
    if (icon && text) {
      icon.textContent = game.paused ? '‚ñ∂Ô∏è' : '‚è∏Ô∏è';
      text.textContent = game.paused ? '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å' : '–ü–∞—É–∑–∞';
    }
    btnPause.setAttribute('aria-pressed', game.paused ? 'true' : 'false');
  }

  if (btnPause) {
    btnPause.addEventListener('click', () => {
      if (game.paused) {
        game._wasPausedByMenu = false;
        closeMenu();
        game.resumeWithCountdown();
      } else {
        game._wasPausedByMenu = false;
        game.pause();
      }
      updatePauseButton();
    });
    btnPause.addEventListener('touchend', (e) => {
      e.preventDefault();
      if (game.paused) {
        game._wasPausedByMenu = false;
        closeMenu();
        game.resumeWithCountdown();
      } else {
        game._wasPausedByMenu = false;
        game.pause();
      }
      updatePauseButton();
    }, { passive: false });
  }

  game.soundEnabled = true;
  if (btnSound?.querySelector('.menu-text')) {
    btnSound.querySelector('.menu-text').textContent = `–ó–≤—É–∫: ${game.soundEnabled ? '–≤–∫–ª' : '–≤—ã–∫–ª'}`;
  }
  updatePauseButton();
  
  btnSound?.addEventListener('click', () => {
    game.soundEnabled = !game.soundEnabled;
    const t = btnSound.querySelector('.menu-text');
    if (t) t.textContent = `–ó–≤—É–∫: ${game.soundEnabled ? '–≤–∫–ª' : '–≤—ã–∫–ª'}`;
    if (game.soundEnabled) {
      game.initAudio();
      if (game.audioContext && game.audioContext.state === 'suspended') {
        game.audioContext.resume();
      }
    }
  });

  function openModal(title, contentHtml, onOpen) {
    if (!modal || !modalOverlay) return;
    modal.innerHTML = `<div class="modal-header"><h3 id="modal-title">${title}</h3></div><div class="window-header"><h4 class="window-subtitle">–û–±—â–µ–µ –æ–∫–Ω–æ</h4></div><div id="modal-content" style="padding:20px;">${contentHtml}</div><div style="padding: 16px; border-top: 1px solid rgba(42,58,74,0.3); display: flex; justify-content: flex-end;"><button id="btn-close" class="btn btn-secondary">–ó–∞–∫—Ä—ã—Ç—å</button></div>`;
    modalOverlay.classList.remove('hidden');
    if (game.running && !game.paused) { game.pause(); game._wasPausedByMenu = true; updatePauseButton(); }
    const close = () => {
      modalOverlay.classList.add('hidden');
      if (game._wasPausedByMenu && game.paused && game.running) { game._wasPausedByMenu = false; game.resumeWithCountdown(); updatePauseButton(); }
    };
    const btnClose = document.getElementById('btn-close');
    if (btnClose) btnClose.onclick = close;
    if (typeof onOpen === 'function') onOpen(close);
  }

  // –õ–ò–î–ï–†–ë–û–†–î –í –õ–ï–í–û–ô –ü–ê–ù–ï–õ–ò
  async function openLeaderboardPanel() {
    if (!lbPanel || !lbBody) return;
    lbPanel.classList.remove('hidden');
    lbBody.innerHTML = '<div class="loader"></div>';

    // –ï—Å–ª–∏ –æ—Ñ—Ñ–ª–∞–π–Ω, –ø–æ–∫–∞–∑–∞—Ç—å OFFLINE
    if (!window.apiService || !window.apiService.isAuthenticated() || !window.BackendIntegration?.prototype?.isBackendConnected?.call?.({})) {
      lbBody.innerHTML = '<p style="margin:12px 0; opacity:.85;">OFFLINE ¬∑ —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞</p>';
      return;
    }

    try {
      const response = await window.apiService.makeRequest('/api/game/leaderboard?limit=15');
      if (!response.success || !Array.isArray(response.leaderboard)) {
        lbBody.innerHTML = '<p style="margin:12px 0; color: var(--error-color);">–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ª–∏–¥–µ—Ä–æ–≤</p>';
        return;
      }
      if (response.leaderboard.length === 0) {
        lbBody.innerHTML = '<p style="margin:12px 0; opacity:.85;">–ü–æ–∫–∞ –ø—É—Å—Ç–æ. –°—Ç–∞–Ω—å—Ç–µ –ø–µ—Ä–≤—ã–º!</p>';
        return;
      }
      const rows = response.leaderboard.map((p, i) => `
        <tr>
          <td class="leaderboard-rank">${i + 1}</td>
          <td class="leaderboard-username">${(p.userId || '').toString().slice(0,16)}${(p.userId||'').length>16?'‚Ä¶':''}</td>
          <td class="leaderboard-score">${(p.totalPoints||0).toLocaleString('ru-RU')}</td>
          <td style="text-align:center;">${p.currentEra || 1}</td>
        </tr>
      `).join('');
      lbBody.innerHTML = `
        <table class="leaderboard-table">
          <thead>
            <tr><th>#</th><th>–ò–≥—Ä–æ–∫</th><th>–û—á–∫–∏</th><th style="text-align:center;">–≠—Ä–∞</th></tr>
          </thead>
          <tbody>${rows}</tbody>
        </table>
      `;
    } catch (e) {
      console.error('LB error', e);
      lbBody.innerHTML = '<p style="margin:12px 0; color: var(--error-color);">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</p>';
    }
  }
  document.getElementById('lb-close')?.addEventListener('click', () => {
    if (lbPanel) {
      lbPanel.classList.add('hidden');
      // –ï—Å–ª–∏ –ª–∏–¥–µ—Ä–±–æ—Ä–¥ –±—ã–ª –æ—Ç–∫—Ä—ã—Ç –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é, –≤–µ—Ä–Ω–µ–º—Å—è –∫ –Ω–µ–º—É
      if (lbPanel._openedFromMainMenu) {
        const mainMenu = document.getElementById('main-menu');
        if (mainMenu) {
          mainMenu.classList.remove('hidden');
          document.getElementById('app')?.classList.add('overlay-open');
        }
        lbPanel._openedFromMainMenu = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
      }
    }
  });

  // –ö–Ω–æ–ø–∫–∞ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∏ –∏–∑ –º–µ–Ω—é
  if (btnLeaderboard) {
    const openFromMain = () => {
      const mm = document.getElementById('main-menu');
      if (mm && !mm.classList.contains('hidden')) {
        // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –ª–∏–¥–µ—Ä–±–æ—Ä–¥ –æ—Ç–∫—Ä—ã—Ç –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        openLeaderboardPanel();
        // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ –∫ –ø–∞–Ω–µ–ª–∏ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞
        const lbPanel = document.getElementById('leaderboard-panel');
        if (lbPanel) lbPanel._openedFromMainMenu = true;
        mm.classList.add('hidden');
      } else {
        openLeaderboardPanel();
      }
    };
    btnLeaderboard.addEventListener('click', openFromMain);
    btnLeaderboard.addEventListener('touchend', (e) => { e.preventDefault(); openFromMain(); }, { passive: false });
  }

  // –†–ï–§–ï–†–ê–õ–´ ‚Äî –ø–µ—Ä–µ—Ñ–æ—Ä–º–∞—Ç –ø–æ–¥ —Å—Å—ã–ª–∫—É, –∑–∞—Ç–µ–º –∫–Ω–æ–ø–∫–∏
  const renderReferrals = () => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ñ—Ñ–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å
    if (window.backendIntegration && !window.backendIntegration.isBackendConnected()) {
      const html = `
        <div style="text-align:center; padding:20px;">
          <h3 style="color:#ef4444; margin-bottom:16px;">–û–§–§–õ–ê–ô–ù</h3>
          <p>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –±–µ–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É</p>
          <p style="opacity:0.7; font-size:14px;">–ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏</p>
        </div>
      `;
      openModal('üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞', html);
      return;
    }
    const base = location.origin + location.pathname.replace(/index\.html?$/,'');
    const userId = (window.apiService && window.apiService.userId) || 'YOU';
    const link = `${base}?ref=${encodeURIComponent(userId)}`;
    const html = `
      <div style="display:grid; gap:14px;">
        <div class="hud-item" style="justify-content:space-between;">
          <span>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞</span>
          <span style="font-size:12px; opacity:0.8;">–ú–∞–∫—Å. 10 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤</span>
        </div>
        <div style="display:flex; gap:8px;">
          <input id="ref-link" value="${link}" readonly style="flex:1; padding:12px; border:1px solid rgba(42,58,74,0.3); border-radius:8px; background:rgba(42,58,74,0.1); color:inherit; font-family:monospace;">
        </div>
        <div style="display:flex; gap:8px;">
          <button id="copy-ref" class="btn btn-primary">–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å</button>
          <button id="share-ref" class="btn btn-success">üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è</button>
        </div>
        <div id="ref-stats" style="opacity:.7; font-size:14px; text-align:center; padding:12px; background:rgba(42,58,74,0.1); border-radius:8px;">
          –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ 10% –æ—Ç –∏—Ö –æ–±–º–µ–Ω–æ–≤!<br>
          <small>–í –ø—Ä–æ–¥–∞–∫—à–Ω–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤</small>
        </div>
        <div style="display:flex; justify-content:flex-end; margin-top:8px;">
          <button id="ref-back" class="btn">–ù–∞–∑–∞–¥</button>
        </div>
      </div>`;
    openModal('üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞', html, (close) => {
      const btn = document.getElementById('copy-ref');
      const shareBtn = document.getElementById('share-ref');
      const backBtn = document.getElementById('ref-back');
      const inp = document.getElementById('ref-link');
      if (btn && inp) {
        btn.onclick = async () => {
          try { await navigator.clipboard.writeText(inp.value); btn.textContent = '–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ'; setTimeout(()=>btn.textContent='–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å',1200);
            if (window.telegramApp?.isTelegram) window.telegramApp.hapticNotification('success');
          } catch {}
        };
      }
      if (shareBtn && inp) {
        shareBtn.onclick = () => {
          if (window.telegramApp?.isTelegram) window.telegramApp.shareReferralLink(inp.value);
          else if (navigator.share) navigator.share({ title:'Dino Runner - –†–µ—Ñ–µ—Ä–∞–ª', text:'–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è!', url: inp.value });
          else { navigator.clipboard.writeText(inp.value); alert('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞'); }
        };
      }
      if (backBtn) {
        backBtn.onclick = close;
      }
    });
  };
  btnReferrals?.addEventListener('click', renderReferrals);
  btnReferrals?.addEventListener('touchend', (e) => { e.preventDefault(); renderReferrals(); }, { passive: false });

  // –û–±–º–µ–Ω/–í—ã–≤–æ–¥ ‚Äî —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –æ—Ñ—Ñ–ª–∞–π–Ω
  const renderExchange = async () => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ñ—Ñ–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å
    if (window.backendIntegration && !window.backendIntegration.isBackendConnected()) {
      const html = `
        <div style="text-align:center; padding:20px;">
          <h3 style="color:#ef4444; margin-bottom:16px;">–û–§–§–õ–ê–ô–ù</h3>
          <p>–§—É–Ω–∫—Ü–∏—è –æ–±–º–µ–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –±–µ–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É</p>
          <p style="opacity:0.7; font-size:14px;">–ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏</p>
        </div>
      `;
      openModal('üí± –û–±–º–µ–Ω –æ—á–∫–æ–≤ –Ω–∞ –º–æ–Ω–µ—Ç—ã', html);
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å –∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ backend API
    let rate = 1000; // –î–µ—Ñ–æ–ª—Ç–Ω—ã–π –∫—É—Ä—Å
    let userPoints = 0;
    
    try {
      if (window.backendIntegration && window.backendIntegration.isBackendConnected()) {
        const ratesResponse = await window.apiService.makeRequest('/api/economy/exchange-rates');
        rate = ratesResponse.currentRate?.rate || 1000;
        
        const userStats = await window.apiService.getUserStats();
        userPoints = userStats.totalPoints || 0;
      }
    } catch (error) {
      console.error('Failed to fetch exchange data:', error);
    }
    const html = `
      <div style="display:grid; gap:14px;">
        <div class="hud-item" style="justify-content:space-between;">
          <span>–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å</span>
          <strong>${rate.toLocaleString('ru-RU')} –æ—á–∫–æ–≤ ‚Üí 1 –º–æ–Ω–µ—Ç–∞</strong>
        </div>
        <div class="hud-item" style="justify-content:space-between;">
          <span>–í–∞—à–∏ –æ—á–∫–∏</span>
          <strong id="ex-points">${userPoints.toLocaleString('ru-RU')}</strong>
        </div>
        <div style="display:grid; gap:8px;">
          <label style="display:flex; align-items:center; gap:8px;">
            <span>–°–∫–æ–ª—å–∫–æ –º–æ–Ω–µ—Ç –ø–æ–ª—É—á–∏—Ç—å</span>
            <input id="ex-amount" type="number" min="1" step="1" value="1" style="width:120px;">
          </label>
          <div style="display:flex; gap:8px;">
            <button class="btn" data-q="1">+1</button>
            <button class="btn" data-q="5">+5</button>
            <button class="btn" data-q="10">+10</button>
            <button class="btn" data-q="50">+50</button>
          </div>
        </div>
        <div style="display:flex; justify-content:space-between;">
          <span>–°—Ç–æ–∏–º–æ—Å—Ç—å –≤ –æ—á–∫–∞—Ö</span>
          <strong id="ex-cost">${rate}</strong>
        </div>
        <div style="display:flex; gap:8px; justify-content:flex-end;">
          <button id="ex-cancel" class="btn">–ù–∞–∑–∞–¥</button>
          <button id="ex-confirm" class="btn btn-success">–û–±–º–µ–Ω—è—Ç—å</button>
        </div>
      </div>`;
    openModal('üí± –û–±–º–µ–Ω –æ—á–∫–æ–≤ –Ω–∞ –º–æ–Ω–µ—Ç—ã', html, (close) => {
      const amount = document.getElementById('ex-amount');
      const cost = document.getElementById('ex-cost');
      document.querySelectorAll('#modal-body [data-q]')?.forEach((b) => {
        b.addEventListener('click', () => {
          const add = Number(b.getAttribute('data-q')) || 0;
          amount.value = String(Math.max(1, Math.floor(Number(amount.value||1)+add)));
          updateCost();
        });
      });
      const btnBack = document.getElementById('ex-cancel');
      const btnOk = document.getElementById('ex-confirm');
      const updateCost = () => { const n = Math.max(1, Math.floor(Number(amount?.value || 1))); if (cost) cost.textContent = (n * rate).toLocaleString('ru-RU'); };
      amount?.addEventListener('input', updateCost);
      btnBack?.addEventListener('click', () => close());
      btnOk?.addEventListener('click', async () => {
        const coinsWanted = Math.max(1, Math.floor(Number(amount?.value || 1)));
        try {
          if (window.apiService && window.apiService.isAuthenticated()) {
            const result = await window.apiService.exchangePoints(coinsWanted);
            if (result.success) {
              game.score = result.newStats.totalPoints;
              game._scoreAccum = game.score;
              game.coins = result.newStats.totalCoins;
              const sEl = document.getElementById('score'); if (sEl) sEl.textContent = String(game.score);
              const cEl = document.getElementById('coins'); if (cEl) cEl.textContent = String(game.coins);
              const sc = document.getElementById('shop-coins'); if (sc) sc.textContent = String(game.coins);
              close();
              if (window.telegramApp?.isTelegram) window.telegramApp.hapticNotification('success');
              setTimeout(() => alert(`–ü–æ–ª—É—á–µ–Ω–æ –º–æ–Ω–µ—Ç: ${coinsWanted}`), 0);
            } else {
              alert(`–û—à–∏–±–∫–∞ –æ–±–º–µ–Ω–∞: ${result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
            }
          } else {
            alert('–û–±–º–µ–Ω –æ—á–∫–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ –æ—Ñ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ');
            return;
          }
        } catch (error) {
          console.error('Exchange error:', error);
          alert(`–û—à–∏–±–∫–∞ –æ–±–º–µ–Ω–∞: ${error.message || '–ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º'}`);
        }
      });
      updateCost();
    });
  };
  btnExchange?.addEventListener('click', renderExchange);
  btnExchange?.addEventListener('touchend', (e) => { e.preventDefault(); renderExchange(); }, { passive: false });

  const renderWithdraw = () => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ñ—Ñ–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å
    if (window.backendIntegration && !window.backendIntegration.isBackendConnected()) {
      const html = `
        <div style="text-align:center; padding:20px;">
          <h3 style="color:#ef4444; margin-bottom:16px;">–û–§–§–õ–ê–ô–ù</h3>
          <p>–§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –±–µ–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É</p>
          <p style="opacity:0.7; font-size:14px;">–ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏</p>
        </div>
      `;
      openModal('üí∞ –í—ã–≤–æ–¥ –º–æ–Ω–µ—Ç (beta)', html);
      return;
    }

    const html = `
      <div style="display:grid; gap:12px;">
        <label>–°—É–º–º–∞ –∫ –≤—ã–≤–æ–¥—É (–º–æ–Ω–µ—Ç—ã):
          <input id="wd-amount" type="number" min="1" step="1" value="10" style="width:140px; margin-left:8px;">
        </label>
        <label>TON –∞–¥—Ä–µ—Å (beta):
          <input id="wd-address" type="text" placeholder="EQ..." style="width:100%; margin-left:8px;">
        </label>
        <div style="display:flex; gap:8px; justify-content:flex-end;">
          <button id="wd-cancel" class="btn">–ù–∞–∑–∞–¥</button>
          <button id="wd-send" class="btn btn-primary">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
        </div>
      </div>`;
    openModal('üí∞ –í—ã–≤–æ–¥ –º–æ–Ω–µ—Ç (beta)', html, (close) => {
      const amount = document.getElementById('wd-amount');
      const address = document.getElementById('wd-address');
      document.getElementById('wd-cancel')?.addEventListener('click', () => close());
      document.getElementById('wd-send')?.addEventListener('click', async () => {
        const n = Math.max(1, Math.floor(Number(amount?.value || 0)));
        const addr = String(address?.value || '').trim();
        if (!addr) { alert('–£–∫–∞–∂–∏—Ç–µ TON –∞–¥—Ä–µ—Å'); return; }
        if (game.coins < n) { alert(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç. –ù—É–∂–Ω–æ: ${n}, —É –≤–∞—Å: ${game.coins}`); return; }
        try {
          if (window.apiService && window.apiService.isAuthenticated()) {
            const result = await window.apiService.withdrawCoins(n, addr);
            if (result.success) {
              game.coins = result.newStats.totalCoins;
              const cEl = document.getElementById('coins'); if (cEl) cEl.textContent = String(game.coins);
              const sc = document.getElementById('shop-coins'); if (sc) sc.textContent = String(game.coins);
              close();
              if (window.telegramApp?.isTelegram) window.telegramApp.hapticNotification('success');
              setTimeout(() => alert('–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.'), 0);
            } else {
              alert(`–û—à–∏–±–∫–∞ –≤—ã–≤–æ–¥–∞: ${result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
            }
          } else {
            alert('–í—ã–≤–æ–¥ –º–æ–Ω–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ –æ—Ñ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ');
            return;
          }
        } catch (error) {
          console.error('Withdrawal error:', error);
          alert(`–û—à–∏–±–∫–∞ –≤—ã–≤–æ–¥–∞: ${error.message || '–ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º'}`);
        }
      });
    });
  };
  btnWithdraw?.addEventListener('click', renderWithdraw);
  btnWithdraw?.addEventListener('touchend', (e) => { e.preventDefault(); renderWithdraw(); }, { passive: false });

  const openShop = () => {
    if (!skinShop) { openModal('–ú–∞–≥–∞–∑–∏–Ω —Å–∫–∏–Ω–æ–≤', '–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.'); return; }
    const coinsEl = document.getElementById('shop-coins'); if (coinsEl) coinsEl.textContent = String(game.coins);

    // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –º–∞–≥–∞–∑–∏–Ω –æ—Ç–∫—Ä—ã—Ç –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    const mainMenu = document.getElementById('main-menu');
    if (mainMenu && !mainMenu.classList.contains('hidden')) {
      skinShop._openedFromMainMenu = true;
    }

    skinShop.openShop();
  };

  if (btnSkins) {
    btnSkins.addEventListener('click', openShop);
    btnSkins.addEventListener('touchend', (e) => { e.preventDefault(); openShop(); }, { passive: false });
  }
  if (btnShopBottom) {
    btnShopBottom.addEventListener('click', openShop);
    btnShopBottom.addEventListener('touchend', (e) => { e.preventDefault(); openShop(); }, { passive: false });
  }

  if (btnTheme) {
    btnTheme.addEventListener('click', () => {
      const currentTheme = document.documentElement.getAttribute('data-theme') || 'dark';
      const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
      if (game && game.environment) game.environment.theme = newTheme;
      document.documentElement.setAttribute('data-theme', newTheme);
      if (game.paused) game.draw();
      const icon = btnTheme.querySelector('.menu-icon');
      const text = btnTheme.querySelector('.menu-text');
      if (icon && text) {
        icon.textContent = newTheme === 'dark' ? 'üåô' : '‚òÄÔ∏è';
        text.textContent = newTheme === 'dark' ? '–¢–µ–º–∞' : '–°–≤–µ—Ç–ª–∞—è';
      }
    });
  }

  if (btnDevTools) {
    const devToolsPanel = document.getElementById('dev-tools-panel');
    const toggle = () => {
      if (devToolsPanel) {
        if (!window.DEV_TOOLS || !window.DEV_TOOLS.initialized) {
          if (window.DEV_TOOLS?.init) {
            window.DEV_TOOLS.init(game, skinShop);
            devToolsPanel.classList.remove('hidden');
          } else { return; }
        }
        if (devToolsPanel.classList.contains('hidden')) devToolsPanel.classList.remove('hidden');
        else devToolsPanel.classList.add('hidden');
      }
    };
    btnDevTools.addEventListener('click', toggle);
    btnDevTools.addEventListener('touchend', (e) => { e.preventDefault(); toggle(); }, { passive: false });
  }

  document.querySelectorAll('.social-link')?.forEach((a) => {
    a.addEventListener('click', (e) => {
      const url = a.getAttribute('href');
      if (!url || url === '#') return;
      try { window.open(url, '_blank'); } catch {}
    });
  });

  if (skinShop) {
    const btnShopExit = document.getElementById('btn-shop-exit');
    if (btnShopExit) {
      btnShopExit.addEventListener('click', () => skinShop.closeShop());
      btnShopExit.addEventListener('touchend', (e) => { e.preventDefault(); skinShop.closeShop(); }, { passive: false });
    }
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
  const closeExchangeModal = () => {
    const exchangeModal = document.getElementById('exchange-modal');
    if (exchangeModal) exchangeModal.classList.add('hidden');
    if (game._wasPausedByMenu && game.paused && game.running) {
      game._wasPausedByMenu = false;
      game.resumeWithCountdown();
      updatePauseButton();
    }
  };

  const btnCloseExchange = document.getElementById('btn-close-exchange');
  const btnExchangeBack = document.getElementById('exchange-back');

  if (btnCloseExchange) {
    btnCloseExchange.addEventListener('click', closeExchangeModal);
    btnCloseExchange.addEventListener('touchend', (e) => { e.preventDefault(); closeExchangeModal(); }, { passive: false });
  }

  if (btnExchangeBack) {
    btnExchangeBack.addEventListener('click', closeExchangeModal);
    btnExchangeBack.addEventListener('touchend', (e) => { e.preventDefault(); closeExchangeModal(); }, { passive: false });
  }

  // –î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ –≤ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–Ω–∞—Ö
  document.addEventListener('click', (e) => {
    if (e.target.id === 'ex-cancel') {
      closeExchangeModal();
    }
    if (e.target.id === 'wd-cancel') {
      // –î–ª—è –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã –≤—ã–≤–æ–¥–∞ - –ø—Ä–æ—Å—Ç–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
      const modalOverlay = document.getElementById('modal-overlay');
      if (modalOverlay) modalOverlay.classList.add('hidden');
      if (game._wasPausedByMenu && game.paused && game.running) {
        game._wasPausedByMenu = false;
        game.resumeWithCountdown();
        updatePauseButton();
      }
    }
  });

  // Bind bottom buttons globally for click before game start
  (function bindBottomButtons(){
    const shopBtn = document.getElementById('btn-shop-bottom');
    const mainMenuBtn = document.getElementById('btn-mainmenu-bottom');
    const menuBtn = document.getElementById('btn-menu-bottom');
    if (shopBtn) {
      shopBtn.addEventListener('click', (e)=>{ e.stopPropagation(); const coinsEl = document.getElementById('shop-coins'); const gi = window.gameInstance; if (coinsEl && gi) coinsEl.textContent = String(gi.coins||0); if (window.gameInstance?.skinShop?.openShop) window.gameInstance.skinShop.openShop(); else document.getElementById('btn-main-shop')?.click(); });
    }
    if (mainMenuBtn) {
      mainMenuBtn.addEventListener('click', (e)=>{ e.stopPropagation(); const mm = document.getElementById('main-menu'); if (mm) mm.classList.remove('hidden'); document.getElementById('app')?.classList.add('overlay-open'); });
    }
    if (menuBtn) {
      menuBtn.addEventListener('click', (e)=>{ e.stopPropagation(); const menuEl = document.getElementById('menu'); if (menuEl) menuEl.classList.remove('hidden'); });
    }
  })();

  // Allow UI interaction when start overlay shown
  (function enableUIWhenOverlayShown(){
    const startOverlay = document.getElementById('tap-to-start');
    if (startOverlay) {
      startOverlay.style.pointerEvents = 'none';
      const content = startOverlay.querySelector('.gameover-content');
      if (content) content.style.pointerEvents = 'auto';
    }
  })();
}

