const express = require('express');
const router = express.Router();
const userService = require('../services/userService');

// –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∫–∏–Ω—ã –≤ –º–∞–≥–∞–∑–∏–Ω–µ
const AVAILABLE_SKINS = [
  // Characters
  { id: 'char-standart', name: '–ü–µ—Ä—Å–æ–Ω–∞–∂: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π', price: 0, type: 'character', packName: 'standart', defaultOwned: true },
  { id: 'char-sonic', name: '–ü–µ—Ä—Å–æ–Ω–∞–∂: Sonic', price: 500, type: 'character', packName: 'sonic', defaultOwned: false },
  { id: 'char-mario', name: '–ü–µ—Ä—Å–æ–Ω–∞–∂: Mario', price: 500, type: 'character', packName: 'mario', defaultOwned: false },
  { id: 'char-pacman', name: '–ü–µ—Ä—Å–æ–Ω–∞–∂: Pac-Man', price: 800, type: 'character', packName: 'pacman', defaultOwned: false },
  { id: 'char-premium', name: '–ü–µ—Ä—Å–æ–Ω–∞–∂: Premium', price: 1000, type: 'character', packName: 'premium', defaultOwned: false },
  { id: 'char-batman', name: '–ü–µ—Ä—Å–æ–Ω–∞–∂: Batman', price: 1200, type: 'character', packName: 'batman', defaultOwned: false },
  { id: 'char-joker', name: '–ü–µ—Ä—Å–æ–Ω–∞–∂: Joker', price: 1200, type: 'character', packName: 'joker', defaultOwned: false },
  { id: 'char-supersonic', name: '–ü–µ—Ä—Å–æ–Ω–∞–∂: SuperSonic', price: 1500, type: 'character', packName: 'supersonic', defaultOwned: false },
  // Ground
  { id: 'ground-standart', name: '–ó–µ–º–ª—è: –°—Ç–∞–Ω–¥–∞—Ä—Ç', price: 0, type: 'ground', packName: 'standart', defaultOwned: true },
  { id: 'ground-sonic', name: '–ó–µ–º–ª—è: Sonic', price: 200, type: 'ground', packName: 'sonic', defaultOwned: false },
  { id: 'ground-mario', name: '–ó–µ–º–ª—è: Mario', price: 200, type: 'ground', packName: 'mario', defaultOwned: false },
  { id: 'ground-pacman', name: '–ó–µ–º–ª—è: Pac-Man', price: 200, type: 'ground', packName: 'pacman', defaultOwned: false },
  { id: 'ground-premium', name: '–ó–µ–º–ª—è: Premium', price: 300, type: 'ground', packName: 'premium', defaultOwned: false },
  { id: 'ground-batman', name: '–ó–µ–º–ª—è: Batman', price: 300, type: 'ground', packName: 'batman', defaultOwned: false },
  { id: 'ground-joker', name: '–ó–µ–º–ª—è: Joker', price: 300, type: 'ground', packName: 'joker', defaultOwned: false },
  { id: 'ground-supersonic', name: '–ó–µ–º–ª—è: SuperSonic', price: 300, type: 'ground', packName: 'supersonic', defaultOwned: false },
  // Enemies: ground
  { id: 'enemies-ground-standart', name: '–ù–∞–∑–µ–º–Ω—ã–µ –≤—Ä–∞–≥–∏: –°—Ç–∞–Ω–¥–∞—Ä—Ç', price: 0, type: 'enemiesGround', packName: 'standart', defaultOwned: true },
  { id: 'enemies-ground-sonic', name: '–ù–∞–∑–µ–º–Ω—ã–µ –≤—Ä–∞–≥–∏: Sonic', price: 250, type: 'enemiesGround', packName: 'sonic', defaultOwned: false },
  { id: 'enemies-ground-mario', name: '–ù–∞–∑–µ–º–Ω—ã–µ –≤—Ä–∞–≥–∏: Mario', price: 250, type: 'enemiesGround', packName: 'mario', defaultOwned: false },
  { id: 'enemies-ground-pacman', name: '–ù–∞–∑–µ–º–Ω—ã–µ –≤—Ä–∞–≥–∏: Pac-Man', price: 250, type: 'enemiesGround', packName: 'pacman', defaultOwned: false },
  { id: 'enemies-ground-premium', name: '–ù–∞–∑–µ–º–Ω—ã–µ –≤—Ä–∞–≥–∏: Premium', price: 400, type: 'enemiesGround', packName: 'premium', defaultOwned: false },
  { id: 'enemies-ground-batman', name: '–ù–∞–∑–µ–º–Ω—ã–µ –≤—Ä–∞–≥–∏: Batman', price: 400, type: 'enemiesGround', packName: 'batman', defaultOwned: false },
  { id: 'enemies-ground-joker', name: '–ù–∞–∑–µ–º–Ω—ã–µ –≤—Ä–∞–≥–∏: Joker', price: 400, type: 'enemiesGround', packName: 'joker', defaultOwned: false },
  { id: 'enemies-ground-supersonic', name: '–ù–∞–∑–µ–º–Ω—ã–µ –≤—Ä–∞–≥–∏: SuperSonic', price: 450, type: 'enemiesGround', packName: 'supersonic', defaultOwned: false },
  // Enemies: air
  { id: 'enemies-air-standart', name: '–í–æ–∑–¥—É—à–Ω—ã–µ –≤—Ä–∞–≥–∏: –°—Ç–∞–Ω–¥–∞—Ä—Ç', price: 0, type: 'enemiesAir', packName: 'standart', defaultOwned: true },
  { id: 'enemies-air-sonic', name: '–í–æ–∑–¥—É—à–Ω—ã–µ –≤—Ä–∞–≥–∏: Sonic', price: 200, type: 'enemiesAir', packName: 'sonic', defaultOwned: false },
  { id: 'enemies-air-mario', name: '–í–æ–∑–¥—É—à–Ω—ã–µ –≤—Ä–∞–≥–∏: Mario', price: 200, type: 'enemiesAir', packName: 'mario', defaultOwned: false },
  { id: 'enemies-air-pacman', name: '–í–æ–∑–¥—É—à–Ω—ã–µ –≤—Ä–∞–≥–∏: Pac-Man', price: 200, type: 'enemiesAir', packName: 'pacman', defaultOwned: false },
  { id: 'enemies-air-premium', name: '–í–æ–∑–¥—É—à–Ω—ã–µ –≤—Ä–∞–≥–∏: Premium', price: 350, type: 'enemiesAir', packName: 'premium', defaultOwned: false },
  { id: 'enemies-air-batman', name: '–í–æ–∑–¥—É—à–Ω—ã–µ –≤—Ä–∞–≥–∏: Batman', price: 350, type: 'enemiesAir', packName: 'batman', defaultOwned: false },
  { id: 'enemies-air-joker', name: '–í–æ–∑–¥—É—à–Ω—ã–µ –≤—Ä–∞–≥–∏: Joker', price: 350, type: 'enemiesAir', packName: 'joker', defaultOwned: false },
  { id: 'enemies-air-supersonic', name: '–í–æ–∑–¥—É—à–Ω—ã–µ –≤—Ä–∞–≥–∏: SuperSonic', price: 350, type: 'enemiesAir', packName: 'supersonic', defaultOwned: false },
  // Clouds
  { id: 'clouds-standart', name: '–û–±–ª–∞–∫–∞: –°—Ç–∞–Ω–¥–∞—Ä—Ç', price: 0, type: 'clouds', packName: 'standart', defaultOwned: true },
  { id: 'clouds-mario', name: '–û–±–ª–∞–∫–∞: Mario', price: 150, type: 'clouds', packName: 'mario', defaultOwned: false },
  { id: 'clouds-premium', name: '–û–±–ª–∞–∫–∞: Premium', price: 250, type: 'clouds', packName: 'premium', defaultOwned: false },
  { id: 'clouds-pacman', name: '–û–±–ª–∞–∫–∞: Pac-Man', price: 150, type: 'clouds', packName: 'pacman', defaultOwned: false },
  { id: 'clouds-batman', name: '–û–±–ª–∞–∫–∞: Batman', price: 250, type: 'clouds', packName: 'batman', defaultOwned: false },
  { id: 'clouds-joker', name: '–û–±–ª–∞–∫–∞: Joker', price: 250, type: 'clouds', packName: 'joker', defaultOwned: false },
  { id: 'clouds-supersonic', name: '–û–±–ª–∞–∫–∞: SuperSonic', price: 250, type: 'clouds', packName: 'supersonic', defaultOwned: false },
];

// Middleware –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è Telegram user ID
function extractTelegramUserId(req) {
  const telegramId = req.headers['x-telegram-id'] || req.body.telegramId;

  if (!telegramId) {
    // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ JWT —Ç–æ–∫–µ–Ω–∞ –∏–ª–∏ –¥—Ä—É–≥–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    const authHeader = req.headers.authorization;
    if (authHeader && authHeader.startsWith('Bearer ')) {
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è user ID –∏–∑ JWT
      // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π ID
      return 12345;
    }

    throw new Error('Telegram User ID required');
  }

  return parseInt(telegramId);
}

// GET /api/shop/skins
router.get('/skins', async (req, res) => {
  try {
    const telegramId = extractTelegramUserId(req);

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ —Å–∫–∏–Ω—ã
    const user = await userService.findByTelegramId(telegramId);
    if (!user) {
      return res.status(404).json({ error: 'User not found' });
    }

    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–∫–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userSkins = await userService.getUserSkins(telegramId);

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∫–∏–Ω–æ–≤ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤–ª–∞–¥–µ–Ω–∏–∏
    const availableSkins = AVAILABLE_SKINS.map(skin => {
      const userSkin = userSkins.find(us => us.skin_id === skin.id);
      return {
        ...skin,
        owned: userSkin ? userSkin.owned : skin.defaultOwned,
        active: userSkin ? userSkin.active : skin.defaultOwned,
        canAfford: user.coins >= skin.price
      };
    });

    res.json({
      success: true,
      skins: availableSkins,
      userBalance: user.coins
    });

    console.log(`üõçÔ∏è Shop skins retrieved for Telegram user ${telegramId}`);
  } catch (error) {
    console.error('‚ùå Error getting shop skins:', error);
    res.status(500).json({ error: 'Failed to get shop skins' });
  }
});

// POST /api/shop/buy-skin
router.post('/buy-skin', async (req, res) => {
  try {
    const telegramId = extractTelegramUserId(req);
    const { skinId } = req.body;

    if (!skinId) {
      return res.status(400).json({ error: 'Skin ID is required' });
    }

    // –ù–∞—Ö–æ–¥–∏–º —Å–∫–∏–Ω –≤ —Å–ø–∏—Å–∫–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
    const skin = AVAILABLE_SKINS.find(s => s.id === skinId);
    if (!skin) {
      return res.status(404).json({ error: 'Skin not found' });
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await userService.findByTelegramId(telegramId);
    if (!user) {
      return res.status(404).json({ error: 'User not found' });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —Å–∫–∏–Ω
    const userSkins = await userService.getUserSkins(telegramId);
    const existingSkin = userSkins.find(us => us.skin_id === skinId);
    
    if (existingSkin && existingSkin.owned) {
      return res.status(400).json({ error: 'Skin already owned' });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
    if (user.coins < skin.price) {
      return res.status(400).json({ error: 'Insufficient coins' });
    }

    // –ü–æ–∫—É–ø–∞–µ–º —Å–∫–∏–Ω
    await userService.buySkin(telegramId, skinId, skin.price);

    // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const updatedUser = await userService.findByTelegramId(telegramId);
    const updatedSkins = await userService.getUserSkins(telegramId);

    res.json({
      success: true,
      message: 'Skin purchased successfully',
      userBalance: updatedUser.coins,
      purchasedSkin: updatedSkins.find(us => us.skin_id === skinId)
    });

    console.log(`üí∞ Skin ${skinId} purchased for Telegram user ${telegramId}`);
  } catch (error) {
    console.error('‚ùå Error buying skin:', error);
    res.status(500).json({ error: 'Failed to buy skin' });
  }
});

// POST /api/shop/activate-skin
router.post('/activate-skin', async (req, res) => {
  try {
    const telegramId = extractTelegramUserId(req);
    const { skinId } = req.body;

    if (!skinId) {
      return res.status(400).json({ error: 'Skin ID is required' });
    }

    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–∫–∏–Ω
    await userService.activateSkin(telegramId, skinId);

    // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–∫–∏–Ω—ã
    const activeSkins = await userService.getActiveSkins(telegramId);

    res.json({
      success: true,
      message: 'Skin activated successfully',
      activeSkins
    });

    console.log(`‚ú® Skin ${skinId} activated for Telegram user ${telegramId}`);
  } catch (error) {
    console.error('‚ùå Error activating skin:', error);
    res.status(500).json({ error: 'Failed to activate skin' });
  }
});

// GET /api/shop/user-skins
router.get('/user-skins', async (req, res) => {
  try {
    const telegramId = extractTelegramUserId(req);

    // –ü–æ–ª—É—á–∞–µ–º —Å–∫–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userSkins = await userService.getUserSkins(telegramId);
    const activeSkins = await userService.getActiveSkins(telegramId);

    res.json({
      success: true,
      userSkins,
      activeSkins
    });

    console.log(`üé® User skins retrieved for Telegram user ${telegramId}`);
  } catch (error) {
    console.error('‚ùå Error getting user skins:', error);
    res.status(500).json({ error: 'Failed to get user skins' });
  }
});

// POST /api/shop/reset-skins
router.post('/reset-skins', async (req, res) => {
  try {
    const telegramId = extractTelegramUserId(req);

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–∫–∏–Ω—ã –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ
    await userService.resetSkinsToDefault(telegramId);

    // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–∫–∏–Ω—ã
    const activeSkins = await userService.getActiveSkins(telegramId);

    res.json({
      success: true,
      message: 'Skins reset to default successfully',
      activeSkins
    });

    console.log(`üîÑ Skins reset to default for Telegram user ${telegramId}`);
  } catch (error) {
    console.error('‚ùå Error resetting skins:', error);
    res.status(500).json({ error: 'Failed to reset skins' });
  }
});

module.exports = router;
