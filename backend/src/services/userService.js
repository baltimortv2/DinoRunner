/**
 * User Service
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
 */

const User = require('../models/User');
const { query, get, run } = require('../database/sqlite-connection');

class UserService {
  constructor() {
    this.initializeDatabase();
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
   */
  async initializeDatabase() {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –∏ –∏–º–µ–µ—Ç –ª–∏ –æ–Ω–∞ –Ω—É–∂–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
      const tableExists = await get(`
        SELECT name FROM sqlite_master
        WHERE type='table' AND name='users'
      `);

      if (tableExists) {
        console.log('üìã Users table exists, checking structure...');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Ç–æ–ª–±—Ü–∞ telegramId
        const columns = await query("PRAGMA table_info(users)");
        const hasTelegramId = columns.some(col => col.name === 'telegramId');

        if (!hasTelegramId) {
          console.log('üîÑ Adding telegramId column to existing table...');
          await run('ALTER TABLE users ADD COLUMN telegramId INTEGER UNIQUE');

          // –ü–µ—Ä–µ–Ω–æ—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç–∞—Ä—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ –µ—Å–ª–∏ –æ–Ω–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
          const hasUserId = columns.some(col => col.name === 'user_id');
          if (hasUserId) {
            await run('UPDATE users SET telegramId = user_id WHERE telegramId IS NULL');
          }
        }
      } else {
        console.log('üÜï Creating new users table...');
        await run(`
          CREATE TABLE users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            telegramId INTEGER UNIQUE NOT NULL,
            username TEXT,
            firstName TEXT,
            lastName TEXT,
            nickname TEXT,
            languageCode TEXT DEFAULT 'ru',
            isPremium BOOLEAN DEFAULT 0,
            coins INTEGER DEFAULT 0,
            era INTEGER DEFAULT 1,
            score INTEGER DEFAULT 0,
            highScore INTEGER DEFAULT 0,
            gamesPlayed INTEGER DEFAULT 0,
            totalPlayTime INTEGER DEFAULT 0,
            lastActive DATETIME DEFAULT CURRENT_TIMESTAMP,
            createdAt DATETIME DEFAULT CURRENT_TIMESTAMP,
            updatedAt DATETIME DEFAULT CURRENT_TIMESTAMP,
            stats TEXT DEFAULT '{}',
            skins TEXT DEFAULT '{}',
            settings TEXT DEFAULT '{}'
          )
        `);
      }

      // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
      await run('CREATE INDEX IF NOT EXISTS idx_users_telegramId ON users(telegramId)');
      await run('CREATE INDEX IF NOT EXISTS idx_users_username ON users(username)');

      console.log('‚úÖ User database initialized successfully');
    } catch (error) {
      console.error('‚ùå Error initializing user database:', error);
      // –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –≤ —Å–ª—É—á–∞–µ —Å–µ—Ä—å–µ–∑–Ω–æ–π –æ—à–∏–±–∫–∏
      try {
        console.log('üîÑ Attempting to recreate users table...');
        await run('DROP TABLE IF EXISTS users');
        await run(`
          CREATE TABLE users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            telegramId INTEGER UNIQUE NOT NULL,
            username TEXT,
            firstName TEXT,
            lastName TEXT,
            nickname TEXT,
            languageCode TEXT DEFAULT 'ru',
            isPremium BOOLEAN DEFAULT 0,
            coins INTEGER DEFAULT 0,
            era INTEGER DEFAULT 1,
            score INTEGER DEFAULT 0,
            highScore INTEGER DEFAULT 0,
            gamesPlayed INTEGER DEFAULT 0,
            totalPlayTime INTEGER DEFAULT 0,
            lastActive DATETIME DEFAULT CURRENT_TIMESTAMP,
            createdAt DATETIME DEFAULT CURRENT_TIMESTAMP,
            updatedAt DATETIME DEFAULT CURRENT_TIMESTAMP,
            stats TEXT DEFAULT '{}',
            skins TEXT DEFAULT '{}',
            settings TEXT DEFAULT '{}'
          )
        `);
        console.log('‚úÖ User database recreated successfully');
      } catch (recreateError) {
        console.error('‚ùå Failed to recreate user database:', recreateError);
      }
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –¥–∞–Ω–Ω—ã—Ö Telegram
   */
  async createOrUpdateFromTelegram(telegramUser) {
    try {
      if (!telegramUser || !telegramUser.id) {
        throw new Error('Invalid Telegram user data');
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      const existingUser = await this.findByTelegramId(telegramUser.id);

      if (existingUser) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        existingUser.updateFromTelegram(telegramUser);
        await this.update(existingUser);
        console.log(`üîÑ Updated user: ${existingUser.getDisplayName()}`);
        return existingUser;
      } else {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const newUser = User.fromTelegramUser(telegramUser);
        const savedUser = await this.create(newUser);
        console.log(`üÜï Created new user: ${savedUser.getDisplayName()}`);
        return savedUser;
      }
    } catch (error) {
      console.error('‚ùå Error creating/updating user from Telegram:', error);
      throw error;
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async create(user) {
    try {
      const userData = user.toJSON();

      const result = await run(`
        INSERT INTO users (
          telegramId, username, firstName, lastName, nickname,
          languageCode, isPremium, coins, era, score, highScore,
          gamesPlayed, totalPlayTime, lastActive, createdAt, updatedAt,
          stats, skins, settings
        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
      `, [
        userData.telegramId,
        userData.username,
        userData.firstName,
        userData.lastName,
        userData.nickname,
        userData.languageCode,
        userData.isPremium ? 1 : 0,
        userData.coins,
        userData.era,
        userData.score,
        userData.highScore,
        userData.gamesPlayed,
        userData.totalPlayTime,
        userData.lastActive,
        userData.createdAt,
        userData.updatedAt,
        userData.stats,
        userData.skins,
        userData.settings
      ]);

      user.id = result.lastID;
      return user;
    } catch (error) {
      console.error('‚ùå Error creating user:', error);
      throw error;
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async update(user) {
    try {
      const userData = user.toJSON();

      await run(`
        UPDATE users SET
          username = ?, firstName = ?, lastName = ?, nickname = ?,
          languageCode = ?, isPremium = ?, coins = ?, era = ?, score = ?,
          highScore = ?, gamesPlayed = ?, totalPlayTime = ?, lastActive = ?,
          updatedAt = ?, stats = ?, skins = ?, settings = ?
        WHERE id = ?
      `, [
        userData.username,
        userData.firstName,
        userData.lastName,
        userData.nickname,
        userData.languageCode,
        userData.isPremium ? 1 : 0,
        userData.coins,
        userData.era,
        userData.score,
        userData.highScore,
        userData.gamesPlayed,
        userData.totalPlayTime,
        userData.lastActive,
        userData.updatedAt,
        userData.stats,
        userData.skins,
        userData.settings,
        userData.id
      ]);

      return user;
    } catch (error) {
      console.error('‚ùå Error updating user:', error);
      throw error;
    }
  }

  /**
   * –ù–∞—Ö–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID Telegram
   */
  async findByTelegramId(telegramId) {
    try {
      const row = await get('SELECT * FROM users WHERE telegramId = ?', [telegramId]);

      if (!row) {
        return null;
      }

      return User.fromDB(row);
    } catch (error) {
      console.error('‚ùå Error finding user by Telegram ID:', error);
      throw error;
    }
  }

  /**
   * –ù–∞—Ö–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
   */
  async findById(id) {
    try {
      const row = await get('SELECT * FROM users WHERE id = ?', [id]);

      if (!row) {
        return null;
      }

      return User.fromDB(row);
    } catch (error) {
      console.error('‚ùå Error finding user by ID:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   */
  async findAll(limit = 100, offset = 0) {
    try {
      const rows = await query('SELECT * FROM users ORDER BY createdAt DESC LIMIT ? OFFSET ?', [limit, offset]);

      return rows.map(row => User.fromDB(row));
    } catch (error) {
      console.error('‚ùå Error finding all users:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –º–æ–Ω–µ—Ç
   */
  async getTopPlayers(limit = 10) {
    try {
      const rows = await query(`
        SELECT * FROM users
        ORDER BY coins DESC, highScore DESC
        LIMIT ?
      `, [limit]);

      return rows.map(row => User.fromDB(row));
    } catch (error) {
      console.error('‚ùå Error getting top players:', error);
      throw error;
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –Ω–∏–∫–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async updateNickname(telegramId, nickname) {
    try {
      const user = await this.findByTelegramId(telegramId);

      if (!user) {
        throw new Error('User not found');
      }

      user.setNickname(nickname);
      await this.update(user);

      return user;
    } catch (error) {
      console.error('‚ùå Error updating nickname:', error);
      throw error;
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async updateUserStats(telegramId, stats) {
    try {
      const user = await this.findByTelegramId(telegramId);

      if (!user) {
        throw new Error('User not found');
      }

      user.updateStats(stats);
      await this.update(user);

      return user;
    } catch (error) {
      console.error('‚ùå Error updating user stats:', error);
      throw error;
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async updateUserSettings(telegramId, settings) {
    try {
      const user = await this.findByTelegramId(telegramId);

      if (!user) {
        throw new Error('User not found');
      }

      user.updateSettings(settings);
      await this.update(user);

      return user;
    } catch (error) {
      console.error('‚ùå Error updating user settings:', error);
      throw error;
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–∫–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async updateUserSkins(telegramId, skins) {
    try {
      const user = await this.findByTelegramId(telegramId);

      if (!user) {
        throw new Error('User not found');
      }

      user.updateSkins(skins);
      await this.update(user);

      return user;
    } catch (error) {
      console.error('‚ùå Error updating user skins:', error);
      throw error;
    }
  }

  /**
   * –î–æ–±–∞–≤–ª—è–µ—Ç –º–æ–Ω–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
   */
  async addCoins(telegramId, amount) {
    try {
      const user = await this.findByTelegramId(telegramId);

      if (!user) {
        throw new Error('User not found');
      }

      user.addCoins(amount);
      await this.update(user);

      return user;
    } catch (error) {
      console.error('‚ùå Error adding coins:', error);
      throw error;
    }
  }

  /**
   * –ó–∞–≤–µ—Ä—à–∞–µ—Ç –∏–≥—Ä–æ–≤—É—é —Å–µ—Å—Å–∏—é, –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—á–µ—Ç –∏ –Ω–∞—á–∏—Å–ª—è–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å
   */
  async endGameSession(telegramId, score) {
    try {
      const user = await this.findByTelegramId(telegramId);
      if (!user) {
        throw new Error('User not found');
      }

      // 1. –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç —Å–∞–º–æ–≥–æ –∏–≥—Ä–æ–∫–∞
      user.updateScore(score);
      await this.update(user);

      // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –∏–≥—Ä–æ–∫–∞ —Ä–µ—Ñ–µ—Ä–µ—Ä
      if (user.referrer_id) {
        const referrer = await this.findById(user.referrer_id);
        if (referrer) {
          // 3. –ù–∞—á–∏—Å–ª—è–µ–º 10% –æ—Ç –æ—á–∫–æ–≤ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –±–æ–Ω—É—Å–∞
          const bonus = Math.floor(score * 0.10);
          if (bonus > 0) {
            await this.addPoints(referrer.telegramId, bonus);
            
            // 4. –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ referral_earnings
            await run(
              'INSERT INTO referral_earnings (referrer_id, referee_id, points_earned) VALUES (?, ?, ?)',
              [referrer.id, user.id, bonus]
            );
            console.log(`Referral bonus of ${bonus} points awarded to ${referrer.telegramId} from ${telegramId}`);
          }
        }
      }

      return user;
    } catch (error) {
      console.error('‚ùå Error ending game session:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async getUserStats(telegramId) {
    try {
      const user = await this.findByTelegramId(telegramId);

      if (!user) {
        return null;
      }

      return {
        id: user.id,
        telegramId: user.telegramId,
        displayName: user.getDisplayName(),
        username: user.username,
        nickname: user.nickname,
        firstName: user.firstName,
        lastName: user.lastName,
        languageCode: user.languageCode,
        isPremium: user.isPremium,
        coins: user.coins,
        era: user.era,
        score: user.score,
        highScore: user.highScore,
        gamesPlayed: user.gamesPlayed,
        totalPlayTime: user.totalPlayTime,
        lastActive: user.lastActive,
        createdAt: user.createdAt,
        isActive: user.isActive(),
        stats: user.stats,
        skins: user.skins,
        settings: user.settings
      };
    } catch (error) {
      console.error('‚ùå Error getting user stats:', error);
      throw error;
    }
  }

  /**
   * –î–æ–±–∞–≤–ª—è–µ—Ç –æ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
   */
  async addPoints(telegramId, amount) {
    try {
      const user = await this.findByTelegramId(telegramId);
      if (!user) {
        throw new Error('User not found');
      }
      user.addPoints(amount);
      await this.update(user);
      return user;
    } catch (error) {
      console.error('‚ùå Error adding points:', error);
      throw error;
    }
  }

  /**
   * –°–ø–∏—Å—ã–≤–∞–µ—Ç –æ—á–∫–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async spendPoints(telegramId, amount) {
    try {
      const user = await this.findByTelegramId(telegramId);

      if (!user) {
        throw new Error('User not found');
      }

      user.spendPoints(amount);
      await this.update(user);

      return user;
    } catch (error) {
      console.error('‚ùå Error spending points:', error);
      throw error;
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç —ç—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–æ–Ω–µ—Ç
   */
  async updateEra(telegramId) {
    try {
      const user = await this.findByTelegramId(telegramId);
      if (!user) {
        throw new Error('User not found');
      }

      // –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–¥–∞–Ω–Ω—ã—Ö –º–æ–Ω–µ—Ç
      const { query } = require('../database/sqlite-connection');
      const result = await query('SELECT COALESCE(SUM(amount), 0) as total_issued FROM claims WHERE status = ?', ['completed']);
      const totalIssued = parseInt(result[0]?.total_issued) || 0;

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç—Ä—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤—ã–¥–∞–Ω–Ω—ã—Ö –º–æ–Ω–µ—Ç
      let newEra = 1;
      if (totalIssued >= 835_000_000) newEra = 14;
      else if (totalIssued >= 815_000_000) newEra = 13;
      else if (totalIssued >= 775_000_000) newEra = 12;
      else if (totalIssued >= 725_000_000) newEra = 11;
      else if (totalIssued >= 675_000_000) newEra = 10;
      else if (totalIssued >= 600_000_000) newEra = 9;
      else if (totalIssued >= 500_000_000) newEra = 8;
      else if (totalIssued >= 400_000_000) newEra = 7;
      else if (totalIssued >= 300_000_000) newEra = 6;
      else if (totalIssued >= 200_000_000) newEra = 5;
      else if (totalIssued >= 100_000_000) newEra = 4;
      else if (totalIssued >= 50_000_000) newEra = 3;
      else if (totalIssued >= 10_000_000) newEra = 2;

      if (newEra !== user.era) {
        user.era = newEra;
        await this.update(user);
        console.log(`üîÑ User ${telegramId} era updated to ${newEra}`);
      }

      return user;
    } catch (error) {
      console.error('‚ùå Error updating era:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —ç–∫–æ–Ω–æ–º–∏–∫–∏
   */
  async getEconomyStats() {
    try {
      const { query, get } = require('../database/sqlite-connection');
      
      // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–¥–∞–Ω–Ω—ã—Ö –º–æ–Ω–µ—Ç
      const issuedResult = await get('SELECT COALESCE(SUM(amount), 0) as issued FROM claims WHERE status = ?', ['completed']);
      const issued = parseInt(issuedResult.issued) || 0;
      
      // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const usersResult = await get('SELECT COUNT(*) as total_users FROM users');
      const totalUsers = parseInt(usersResult.total_users) || 0;
      
      // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤ —É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const pointsResult = await get('SELECT COALESCE(SUM(score), 0) as total_points FROM users');
      const totalPoints = parseInt(pointsResult.total_points) || 0;
      
      // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç —É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const coinsResult = await get('SELECT COALESCE(SUM(coins), 0) as total_coins FROM users');
      const totalCoins = parseInt(coinsResult.total_coins) || 0;

      return {
        totalSupply: 850_000_000,
        issued: issued,
        remaining: 850_000_000 - issued,
        totalUsers: totalUsers,
        totalPoints: totalPoints,
        totalCoins: totalCoins
      };
    } catch (error) {
      console.error('‚ùå Error getting economy stats:', error);
      return {
        totalSupply: 850_000_000,
        issued: 0,
        remaining: 850_000_000,
        totalUsers: 0,
        totalPoints: 0,
        totalCoins: 0
      };
    }
  }

  /**
   * –°–ø–∏—Å—ã–≤–∞–µ—Ç –º–æ–Ω–µ—Ç—ã —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async spendCoins(telegramId, amount) {
    try {
      const user = await this.findByTelegramId(telegramId);

      if (!user) {
        throw new Error('User not found');
      }

      user.spendCoins(amount);
      await this.update(user);

      return user;
    } catch (error) {
      console.error('‚ùå Error spending coins:', error);
      throw error;
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async updateScore(telegramId, score) {
    try {
      const user = await this.findByTelegramId(telegramId);

      if (!user) {
        throw new Error('User not found');
      }

      user.updateScore(score);
      await this.update(user);

      return user;
    } catch (error) {
      console.error('‚ùå Error updating score:', error);
      throw error;
    }
  }

  /**
   * –£–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π)
   */
  async delete(telegramId) {
    try {
      const result = await run('DELETE FROM users WHERE telegramId = ?', [telegramId]);
      return result.changes > 0;
    } catch (error) {
      console.error('‚ùå Error deleting user:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   */
  async getUserCount() {
    try {
      const result = await get('SELECT COUNT(*) as count FROM users');
      return result.count;
    } catch (error) {
      console.error('‚ùå Error getting user count:', error);
      return 0;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –≤—ã–≤–æ–¥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async getUserWithdrawals(telegramId) {
    try {
      const user = await this.findByTelegramId(telegramId);
      if (!user) {
        throw new Error('User not found');
      }

      const { query } = require('../database/sqlite-connection');
      const withdrawals = await query(
        `SELECT id, amount, ton_address, status, created_at, processed_at, tx_hash
         FROM withdrawals 
         WHERE user_id = ? 
         ORDER BY created_at DESC`,
        [user.id]
      );

      return withdrawals || [];
    } catch (error) {
      console.error('‚ùå Error getting user withdrawals:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤—ã–≤–æ–¥–æ–≤ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
   */
  async getWithdrawalStats() {
    try {
      const { query, get } = require('../database/sqlite-connection');

      // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–≤–æ–¥–æ–≤
      const totalResult = await get('SELECT COUNT(*) as count FROM withdrawals');
      const total = parseInt(totalResult.count) || 0;

      // –û–±—â–∞—è —Å—É–º–º–∞ –≤—ã–≤–µ–¥–µ–Ω–Ω—ã—Ö –º–æ–Ω–µ—Ç
      const completedResult = await get(
        'SELECT COALESCE(SUM(amount), 0) as total FROM withdrawals WHERE status = ?',
        ['completed']
      );
      const completed = parseInt(completedResult.total) || 0;

      // –°—É–º–º–∞ –æ–∂–∏–¥–∞—é—â–∏—Ö –æ–±—Ä–∞–±–æ—Ç–∫–∏
      const pendingResult = await get(
        'SELECT COALESCE(SUM(amount), 0) as total FROM withdrawals WHERE status = ?',
        ['pending']
      );
      const pending = parseInt(pendingResult.total) || 0;

      // –°—É–º–º–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö
      const rejectedResult = await get(
        'SELECT COALESCE(SUM(amount), 0) as total FROM withdrawals WHERE status = ?',
        ['rejected']
      );
      const rejected = parseInt(rejectedResult.total) || 0;

      // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –≤—ã–≤–æ–¥–æ–≤
      const recent = await query(
        `SELECT w.amount, w.ton_address, w.status, w.created_at, u.username, u.first_name
         FROM withdrawals w
         JOIN users u ON w.user_id = u.id
         ORDER BY w.created_at DESC
         LIMIT 10`
      );

      return {
        total,
        completed,
        pending,
        rejected,
        recent: recent || []
      };
    } catch (error) {
      console.error('‚ùå Error getting withdrawal stats:', error);
      throw error;
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–≤–æ–¥–∞ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
   */
  async processWithdrawal(withdrawalId, action, adminTelegramId, txHash = null) {
    try {
      const { get, run } = require('../database/sqlite-connection');

      // –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥
      const withdrawal = await get('SELECT * FROM withdrawals WHERE id = ?', [withdrawalId]);
      if (!withdrawal) {
        throw new Error('Withdrawal not found');
      }

      if (withdrawal.status !== 'pending') {
        throw new Error('Withdrawal already processed');
      }

      // –ü–æ–ª—É—á–∞–µ–º –∞–¥–º–∏–Ω–∞
      const admin = await this.findByTelegramId(adminTelegramId);
      if (!admin || admin.role !== 'admin') {
        throw new Error('Admin access required');
      }

      let newStatus, message;

      if (action === 'approve') {
        newStatus = 'completed';
        message = 'Withdrawal approved';
        
        // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å TON –∫–æ—à–µ–ª—å–∫–æ–º –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–æ–Ω–µ—Ç
        // –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π
        
      } else if (action === 'reject') {
        newStatus = 'rejected';
        message = 'Withdrawal rejected';
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–Ω–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await this.addCoins(withdrawal.telegram_id, withdrawal.amount);
        
      } else {
        throw new Error('Invalid action');
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
      await run(
        `UPDATE withdrawals 
         SET status = ?, processed_at = CURRENT_TIMESTAMP, tx_hash = ?, admin_id = ?
         WHERE id = ?`,
        [newStatus, txHash, admin.id, withdrawalId]
      );

      console.log(`‚úÖ Withdrawal ${action}ed: ID ${withdrawalId} by admin ${adminTelegramId}`);

      return { success: true, message, newStatus };
    } catch (error) {
      console.error('‚ùå Error processing withdrawal:', error);
      throw error;
    }
  }
}

module.exports = new UserService();
